//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  rmwOrderings = [
    # View name               raw name     documentation name
    ("",                      "",          "acquiring and releasing"),
    ("Relaxed",               "Relaxed",   "relaxed"),
    ("Acquiring",             "Acquiring", "acquiring"),
    ("Releasing",             "Releasing", "releasing"),
    ("AcquiringAndReleasing", "",          "acquiring and releasing"),
  ]

  loadOrderings = [
    # ordering     raw API name,  doc name
    ("",           "",            "acquiring"),
    ("Relaxed",    "Relaxed",     "relaxed"),
    ("Acquiring",  "",            "acquiring"),
  ]

  storeOrderings = [
    # ordering     raw API name,  doc name
    ("",           "",            "releasing"),
    ("Relaxed",    "Relaxed",     "relaxed"),
    ("Releasing",  "",            "releasing"),
  ]

  def lowerFirst(str):
    return str[:1].lower() + str[1:] if str else ""

  def extensionSuffix(ordering):
    return "." + ordering if ordering else ""

  integerOperations = [
    #          API name, operator, doc
    (     'WrappingAdd', '&+',    "wrapping add"),
    ('WrappingSubtract', '&-',    "wrapping subtract"),
    (      'BitwiseAnd', '&',     "bitwise and"),
    (       'BitwiseOr', '|',     "bitwise or"),
    (      'BitwiseXor', '^',     "bitwise xor"),
  ]
}%

/// Provides atomic operations on an unsigned integer value, without owning
/// the value itself.
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
@frozen
public struct UnsafeAtomicUInt {
  @usableFromInline
  internal let _ptr: UnsafeMutableRawPointer

  @_transparent @_alwaysEmitIntoClient
  public init(_ pointer: UnsafeMutablePointer<UInt>) {
    self._ptr = UnsafeMutableRawPointer(pointer)
  }
}

% for (Ordering, rawname, docname) in rmwOrderings:
%   if Ordering <> "":
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt {
  /// A view providing atomic operations on an `UnsafeAtomicUInt` with
  /// ${docname} memory ordering.
  @frozen
  public struct ${Ordering} {
    @usableFromInline
    internal let _ptr: UnsafeMutableRawPointer

    @_transparent @_alwaysEmitIntoClient
    internal init(_pointer: UnsafeMutableRawPointer) {
      self._ptr = _pointer
    }
  }

  /// Returns a view providing atomic operations on this value with
  /// ${docname} memory ordering.
  @_transparent @_alwaysEmitIntoClient
  public var ${lowerFirst(Ordering)}: ${Ordering} {
    ${Ordering}(_pointer: _ptr)
  }
}
%   end
% end

% for (Ordering, RawOrdering, docname) in loadOrderings:
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt${extensionSuffix(Ordering)} {
  /// Atomically loads and returns the current value,
  /// with ${docname} memory ordering.
  @_transparent @_alwaysEmitIntoClient
  public func load() -> UInt {
    _ptr._atomic${RawOrdering}LoadWord()
  }
}
% end


% for (Ordering, RawOrdering, docname) in storeOrderings:
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt${extensionSuffix(Ordering)} {
  /// Atomically sets the current value to `desired`,
  /// with ${docname} memory ordering.
  @_transparent @_alwaysEmitIntoClient
  public func store(_ desired: UInt) {
    _ptr._atomic${RawOrdering}StoreWord(desired)
  }
}
% end

% for (Ordering, RawOrdering, docname) in rmwOrderings:
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt${extensionSuffix(Ordering)} {
  /// Atomically sets the current value to `desired` and returns the previous
  /// value, with ${docname} memory ordering.
  ///
  /// - Returns: The original value.
  @_transparent @_alwaysEmitIntoClient
  public func exchange(_ desired: UInt) -> UInt {
    _ptr._atomic${RawOrdering}ExchangeWord(desired)
  }
}
% end

% for (Ordering, RawOrdering, docname) in rmwOrderings:
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt${extensionSuffix(Ordering)} {
  /// Perform an atomic compare and exchange operation with
  /// ${docname} ordering constraints.
  ///
  /// This operation is equivalent to the following pseudo-code:
  ///
  /// ```
  /// atomically${Ordering}(self) { value in
  ///   if value == expected {
  ///      value = desired
  ///      return true
  ///   } else {
  ///      expected = value
  ///      return false
  ///   }
  /// }
  /// ```
  @_transparent @_alwaysEmitIntoClient
  public func compareExchange(expected: inout UInt, desired: UInt) -> Bool {
    _ptr._atomic${RawOrdering}CompareExchangeWord(
      expected: &expected,
      desired: desired)
  }
}
% end


% for (Ordering, RawOrdering, docname) in rmwOrderings:
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt${extensionSuffix(Ordering)} {
  % for (name, op, doc) in integerOperations:
  /// Perform an atomic ${doc} operation and return the original value, with
  /// acquiring-and-releasing memory ordering.
  ///
  % if "Wrapping" in name:
  /// Note: This operation silently wraps around on overflow, like the
  /// `${op}` operator on `UInt` values.
  ///
  % end
  /// - Returns: The original value before the operation.
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public func fetchThen${name}(_ operand: UInt) -> UInt {
    _ptr._atomic${RawOrdering}FetchThen${name}Word(operand)
  }
% end

% for (name, op, doc) in integerOperations:
  /// Perform an atomic ${doc} operation and return the new value, with
  /// acquiring-and-releasing memory ordering.
  ///
  % if "Wrapping" in name:
  /// Note: This operation silently wraps around on overflow, like the
  /// `${op}` operator on `UInt` values.
  ///
  % end
  /// - Returns: The new value after the operation.
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public func ${lowerFirst(name)}ThenFetch(_ operand: UInt) -> UInt {
    _ptr._atomic${RawOrdering}FetchThen${name}Word(operand) ${op} operand
  }
% end
}
% end
