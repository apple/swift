//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  integerOperations = [
    #          API name, lowercase name,     operator
    (     'WrappingAdd', 'wrappingAdd',      '&+'),
    ('WrappingSubtract', 'wrappingSubtract', '&-'),
    (             'And', 'and',              '&'),
    (              'Or', 'or',               '|'),
    (             'Xor', 'xor',              '^')
  ]

  boolOperations = [
    ('Toggle', 'Xor',  '^'),
    ('And',    'And',  '&'),
    ('Or',     'Or',   '|'),
  ]
}%

@frozen
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public struct MemoryOrdering {
  // This struct works like a non-frozen enum whose cases aren't reorderable.

  @usableFromInline
  internal var _rawValue: Int

  @inlinable @_transparent // Debug performance
  internal init(_rawValue: Int) {
    self._rawValue = _rawValue
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension MemoryOrdering {
  // FIXME: Explain these ordering levels in more detail.

  /// Guarantees the atomicity of the specific operation on which it is applied,
  /// but imposes no ordering constraints on any other reads or writes.
  @_transparent // Debug performance
  public static var relaxed: MemoryOrdering {
    MemoryOrdering(_rawValue: 0)
  }

  /// An acquiring load prevents the effects of subsequent load and store
  /// operations on the current thread from appearing to happen before the
  /// effect of the atomic operation itself.
  @_transparent // Debug performance
  public static var acquiring: MemoryOrdering {
    MemoryOrdering(_rawValue: 1)
  }

  /// A releasing store prevents the effects of previous load and store
  /// operations on the current thread from appearing to happen after the effect
  /// of the atomic operation itself.
  @_transparent // Debug performance
  public static var releasing: MemoryOrdering {
    MemoryOrdering(_rawValue: 2)
  }

  /// An acquiring-and-releasing operation is a combination of `.acquiring` and
  /// `.releasing`; it prevents all neighboring load and store operations on the
  /// current thread from appearing to happen in a different order in relation
  /// to the atomic operation.
  @_transparent // Debug performance
  public static var acquiringAndReleasing: MemoryOrdering {
    MemoryOrdering(_rawValue: 3)
  }

  /// In addition to ensuring the same constraints as `acquiringAndReleasing`,
  /// this ordering level also establishes a single total modification ordering
  /// of all atomic operations that have this ordering level.
  @_transparent // Debug performance
  public static var sequentiallyConsistent: MemoryOrdering {
    MemoryOrdering(_rawValue: 4)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension MemoryOrdering: Equatable {
  @_transparent // Debug performance
  public static func ==(
    left: MemoryOrdering,
    right: MemoryOrdering
  ) -> Bool {
    return left._rawValue == right._rawValue
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension MemoryOrdering: Hashable {
  @inlinable
  public func hash(into hasher: inout Hasher) {
    hasher.combine(_rawValue)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension MemoryOrdering: CustomStringConvertible {
  public var description: String {
    switch self {
    case .relaxed: return "relaxed"
    case .acquiring: return "acquiring"
    case .releasing: return "releasing"
    case .acquiringAndReleasing: return "acquiringAndReleasing"
    case .sequentiallyConsistent: return "sequentiallyConsistent"
    default: return "MemoryOrdering(\(_rawValue))"
    }
  }
}

//------------------------------------------------------------------------------

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
@frozen
public struct UnsafeAtomicUInt {
  @usableFromInline
  internal let _ptr: UnsafeMutableRawPointer

  @inlinable
  public init(_ pointer: UnsafeMutablePointer<UInt>) {
    self._ptr = UnsafeMutableRawPointer(pointer)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUInt {
  @_transparent
  public func load(
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> UInt {
    return _ptr._atomicLoadWord(ordering: ordering)
  }

  @_transparent
  public func store(
    _ desired: UInt,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) {
    _ptr._atomicStoreWord(desired, ordering: ordering)
  }

  @_transparent
  public func exchange(
    _ desired: UInt,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> UInt {
    return _ptr._atomicExchangeWord(desired, ordering: ordering)
  }

  @_transparent
  public func compareExchange(
    expected: inout UInt,
    desired: UInt,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Bool {
    return _ptr._atomicCompareExchangeWord(
      expected: &expected,
      desired: desired,
      ordering: ordering)
  }

% for (name, _, _) in integerOperations:
  @_transparent
  @discardableResult
  public func fetchThen${name}(
    _ operand: UInt,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> UInt {
    return _ptr._atomicFetchThen${name}Word(operand, ordering: ordering)
  }
% end

% for (name, lowerName, op) in integerOperations:
  @_transparent
  @discardableResult
  public func ${lowerName}ThenFetch(
    _ operand: UInt,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> UInt {
    return _ptr._atomic${name}ThenFetchWord(operand, ordering: ordering)
  }
% end
}

//------------------------------------------------------------------------------

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
@frozen
public struct UnsafeAtomicInt {
  @usableFromInline
  internal let _ptr: UnsafeMutableRawPointer

  @inlinable
  public init(_ pointer: UnsafeMutablePointer<Int>) {
    self._ptr = UnsafeMutableRawPointer(pointer)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicInt {
  @_transparent
  public func load(
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Int {
    return Int(bitPattern: _ptr._atomicLoadWord(ordering: ordering))
  }

  @_transparent
  public func store(
    _ desired: Int,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) {
    _ptr._atomicStoreWord(UInt(bitPattern: desired), ordering: ordering)
  }

  @_transparent
  public func exchange(
    _ desired: Int,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Int {
    let desiredWord = UInt(bitPattern: desired)
    let result = _ptr._atomicExchangeWord(desiredWord, ordering: ordering)
    return Int(bitPattern: result)
  }

  @_transparent
  public func compareExchange(
    expected: inout Int,
    desired: Int,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Bool {
    var expectedWord = UInt(bitPattern: expected)
    let success = _ptr._atomicCompareExchangeWord(
      expected: &expectedWord,
      desired: UInt(bitPattern: desired),
      ordering: ordering)
    expected = Int(bitPattern: expectedWord)
    return success
  }

% for (name, _, op) in integerOperations:
  @_transparent
  @discardableResult
  public func fetchThen${name}(
    _ operand: Int,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Int {
    let result = _ptr._atomicFetchThen${name}Word(
      UInt(bitPattern: operand),
      ordering: ordering)
    return Int(bitPattern: result)
  }
% end

% for (name, lowerName, op) in integerOperations:
  @_transparent
  @discardableResult
  public func ${lowerName}ThenFetch(
    _ operand: Int,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Int {
    let result = _ptr._atomic${name}ThenFetchWord(
      UInt(bitPattern: operand),
      ordering: ordering)
    return Int(bitPattern: result)
  }
% end
}

//------------------------------------------------------------------------------

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
@frozen
public struct UnsafeAtomicBool {
  @usableFromInline
  internal let _ptr: UnsafeMutableRawPointer

  @inlinable
  public init(_ pointer: UnsafeMutablePointer<Bool>) {
    self._ptr = UnsafeMutableRawPointer(pointer)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicBool {
  @_transparent
  public func load(
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Bool {
    let value = _ptr._atomicLoadWord(ordering: ordering)
    return value != 0
  }

  @_transparent
  public func store(
    _ desired: Bool,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) {
    _ptr._atomicStoreWord(desired ? 1 : 0, ordering: ordering)
  }

  @_transparent
  public func exchange(
    _ desired: Bool,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Bool {
    let result = _ptr._atomicExchangeWord(desired ? 1 : 0, ordering: ordering)
    return (result != 0)
  }

  @_transparent
  public func compareExchange(
    expected: inout Bool,
    desired: Bool,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Bool {
    var expectedWord: UInt = desired ? 1 : 0
    let success = _ptr._atomicCompareExchangeWord(
      expected: &expectedWord,
      desired: desired ? 1 : 0,
      ordering: ordering)
    expected = (expectedWord != 0)
    return success
  }

% for (name, intName, op) in boolOperations:
  @_transparent
  @discardableResult
  public func fetchThen${name}(
    _ operand: Bool,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Bool {
    let result = _ptr._atomicFetchThen${intName}Word(
      operand ? 1 : 0,
      ordering: ordering)
    return (result != 0)
  }
% end

% for (name, intName, op) in boolOperations:
  @_transparent
  @discardableResult
  public func ${name.lower()}ThenFetch(
    _ operand: Bool,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Bool {
    let result = _ptr._atomic${intName}ThenFetchWord(
      operand ? 1 : 0,
      ordering: ordering)
    return (result != 0)
  }
% end
}

//------------------------------------------------------------------------------

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
@frozen
public struct UnsafeAtomicUnmanaged<Instance: AnyObject> {
  @usableFromInline
  internal let _ptr: UnsafeMutableRawPointer

  @inlinable
  public init(_ pointer: UnsafeMutablePointer<Unmanaged<Instance>?>) {
    self._ptr = UnsafeMutableRawPointer(pointer)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUnmanaged {
  @_transparent
  public func load(
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Unmanaged<Instance>? {
    let value = _ptr._atomicLoadWord(ordering: ordering)
    guard let p = UnsafeRawPointer(bitPattern: value) else { return nil }
    return Unmanaged.fromOpaque(p)
  }

  @_transparent
  public func store(
    _ desired: Unmanaged<Instance>?,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) {
    let desiredWord = UInt(bitPattern: desired?.toOpaque())
    _ptr._atomicStoreWord(desiredWord, ordering: ordering)
  }

  @_transparent
  public func exchange(
    _ desired: Unmanaged<Instance>?,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Unmanaged<Instance>? {
    let desiredWord = UInt(bitPattern: desired?.toOpaque())
    let resultWord = _ptr._atomicExchangeWord(desiredWord, ordering: ordering)
    guard let r = UnsafeRawPointer(bitPattern: resultWord) else { return nil }
    return Unmanaged.fromOpaque(r)
  }

  @_transparent
  public func compareExchange(
    expected: inout Unmanaged<Instance>?,
    desired: Unmanaged<Instance>?,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Bool {
    var expectedWord = UInt(bitPattern: expected?.toOpaque())
    let desiredWord = UInt(bitPattern: desired?.toOpaque())
    let success = _ptr._atomicCompareExchangeWord(
      expected: &expectedWord,
      desired: desiredWord,
      ordering: ordering)
    if let p = UnsafeRawPointer(bitPattern: expectedWord) {
      expected = Unmanaged.fromOpaque(p)
    } else {
      expected = nil
    }
    return success
  }
}

//------------------------------------------------------------------------------

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
@frozen
public struct UnsafeAtomicUnsafeMutablePointer<Pointee> {
  @usableFromInline
  internal let _ptr: UnsafeMutableRawPointer

  @inlinable
  public init(_ pointer: UnsafeMutablePointer<UnsafeMutablePointer<Pointee>?>) {
    self._ptr = UnsafeMutableRawPointer(pointer)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicUnsafeMutablePointer {
  @_transparent
  public func load(
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> UnsafeMutablePointer<Pointee>? {
    let value = _ptr._atomicLoadWord(ordering: ordering)
    return UnsafeMutablePointer(bitPattern: value)
  }

  @_transparent
  public func store(
    _ desired: UnsafeMutablePointer<Pointee>?,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) {
    let desiredWord = UInt(bitPattern: desired)
    _ptr._atomicStoreWord(desiredWord, ordering: ordering)
  }

  @_transparent
  public func exchange(
    _ desired: UnsafeMutablePointer<Pointee>?,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> UnsafeMutablePointer<Pointee>? {
    let desiredWord = UInt(bitPattern: desired)
    let resultWord = _ptr._atomicExchangeWord(desiredWord, ordering: ordering)
    return UnsafeMutablePointer(bitPattern: resultWord)
  }

  @_transparent
  public func compareExchange(
    expected: inout UnsafeMutablePointer<Pointee>?,
    desired: UnsafeMutablePointer<Pointee>?,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Bool {
    var expectedWord = UInt(bitPattern: expected)
    let desiredWord = UInt(bitPattern: desired)
    let success = _ptr._atomicCompareExchangeWord(
      expected: &expectedWord,
      desired: desiredWord,
      ordering: ordering)
    expected = UnsafeMutablePointer(bitPattern: expectedWord)
    return success
  }
}

//------------------------------------------------------------------------------

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
@frozen
public struct UnsafeAtomicInitializableReference<Instance: AnyObject> {
  @usableFromInline
  internal let _ptr: UnsafeMutableRawPointer

  @inlinable
  public init(_ pointer: UnsafeMutablePointer<Instance?>) {
    self._ptr = UnsafeMutableRawPointer(pointer)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicInitializableReference {
  @_transparent
  public func initialize(
    to value: __owned Instance,
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Instance {
    let desired = Unmanaged.passRetained(value)
    let desiredWord = UInt(bitPattern: desired.toOpaque())
    var expectedWord: UInt = 0
    let success = _ptr._atomicCompareExchangeWord(
      expected: &expectedWord,
      desired: desiredWord,
      ordering: ordering)
    if !success {
      // The reference has already been initialized. Balance the retain that
      // we performed on `desired`.
      desired.release()
    }
    _precondition(expectedWord != 0)
    let result = Unmanaged<Instance>.fromOpaque(
      UnsafeRawPointer(bitPattern: expectedWord)!)
    return result.takeUnretainedValue()
  }

  @_transparent
  public func load(
    ordering: MemoryOrdering = .sequentiallyConsistent
  ) -> Instance? {
    let value = _ptr._atomicLoadWord(ordering: ordering)
    guard let ptr = UnsafeRawPointer(bitPattern: value) else { return nil }
    return Unmanaged.fromOpaque(ptr).takeUnretainedValue()
  }
}
