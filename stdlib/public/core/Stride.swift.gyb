//===--- Stride.swift.gyb - Components for stride(...) iteration ----------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

/// A notionally one-dimensional type that can be offset and measured.
///
/// - Important: The `Strideable` protocol provides default implementations for
///   the equal-to (`==`) and less-than (`<`) operators that depend on the
///   `Stride` type's implementations. If a type conforming to `Strideable`
///   is its own `Stride` type, it must provide concrete implementations of
///   the two operators to avoid infinite recursion.
public protocol Strideable : Comparable {
  /// A type that represents the distance between two values of `Self`.
  associatedtype Stride : SignedNumeric, Comparable

  /// Returns a stride `x` such that `self.advanced(by: x)` approximates
  /// `other`.
  ///
  /// If `Stride` conforms to `BinaryInteger`, then
  /// `self.advanced(by: x) == other`.
  ///
  /// - Complexity: O(1).
  func distance(to other: Self) -> Stride

  /// Returns a `Self` `x` such that `self.distance(to: x)` approximates `n`.
  ///
  /// If `Stride` conforms to `BinaryInteger`, then
  /// `self.distance(to: x) == n`.
  ///
  /// - Complexity: O(1).
  func advanced(by n: Stride) -> Self

  /// Returns the greatest nonnegative integer `x` such that
  /// `self._advanced(by: n, count: x)` lies in the half-open interval
  /// [`self`, `other`).
  func _steps(to other: Self, by n: Stride) -> Int

  /// Returns a `Self` `x` such that `self.distance(to: x)` approximates
  /// `repeatElement(n, count: i).reduce(0, +)`.
  ///
  /// If `Stride` conforms to `BinaryInteger`, then
  /// `self.distance(to: x) == Stride(i) * n`.
  ///
  /// - Complexity: O(1).
  func _advanced(by n: Stride, count i: Int) -> Self

  /// `_step(after:from:by:)` is an implementation detail of Strideable; do not
  /// use it directly.
  static func _step(
    after current: (index: Int?, value: Self),
    from start: Self, by distance: Self.Stride
  ) -> (index: Int?, value: Self)

  associatedtype _DisabledRangeIndex = _DisabledRangeIndex_
}

extension Strideable {
  @_inlineable
  public static func < (x: Self, y: Self) -> Bool {
    return x.distance(to: y) > 0
  }

  @_inlineable
  public static func == (x: Self, y: Self) -> Bool {
    return x.distance(to: y) == 0
  }
}

//===----------------------------------------------------------------------===//

%{
  # Strideable used to provide + and - unconditionally. With the updated
  # collection indexing model of Swift 3 this became unnecessary for integer
  # types and was deprecated, as it was a way to write mixed-type arithmetic
  # expressions that are otherwise are not allowed.
}%
% for Base, VersionInfo in [
%   ('Strideable where Self : _Pointer', None),
%   ('Strideable', 'deprecated: 3, obsoleted: 4'),
%   ]:
%   Availability = '@available(swift, %s, message: "Please use explicit type conversions or Strideable methods for mixed-type arithmetics.")' % (VersionInfo) if VersionInfo else ''

extension ${Base} {
  @_inlineable // FIXME(sil-serialize-all)
  @_transparent
  ${Availability}
  public static func + (lhs: Self, rhs: Self.Stride) -> Self {
    return lhs.advanced(by: rhs)
  }

  @_inlineable // FIXME(sil-serialize-all)
  @_transparent
  ${Availability}
  public static func + (lhs: Self.Stride, rhs: Self) -> Self {
    return rhs.advanced(by: lhs)
  }

  @_inlineable // FIXME(sil-serialize-all)
  @_transparent
  ${Availability}
  public static func - (lhs: Self, rhs: Self.Stride) -> Self {
    return lhs.advanced(by: -rhs)
  }

  @_inlineable // FIXME(sil-serialize-all)
  @_transparent
  ${Availability}
  public static func - (lhs: Self, rhs: Self) -> Self.Stride {
    return rhs.distance(to: lhs)
  }

  @_inlineable // FIXME(sil-serialize-all)
  @_transparent
  ${Availability}
  public static func += (lhs: inout Self, rhs: Self.Stride) {
    lhs = lhs.advanced(by: rhs)
  }

  @_inlineable // FIXME(sil-serialize-all)
  @_transparent
  ${Availability}
  public static func -= (lhs: inout Self, rhs: Self.Stride) {
    lhs = lhs.advanced(by: -rhs)
  }
}

% end

//===----------------------------------------------------------------------===//

extension Strideable {
  @_inlineable
  public static func _step(
    after current: (index: Int?, value: Self),
    from start: Self, by distance: Self.Stride
  ) -> (index: Int?, value: Self) {
    let i = current.index! + 1
    return (i, start._advanced(by: distance, count: i))
  }
}

extension Strideable where Stride : BinaryInteger {
  @_inlineable
  public func _steps(to other: Self, by n: Stride) -> Int {
    let distance = self.distance(to: other)
    _precondition(n != 0 && distance != 0)
    guard (n < 0) == (distance < 0) else { return 0 }

    guard let result = Int(exactly: (distance - 1) / n), result < Int.max else {
      fatalError("Steps from \(self) to \(other) exceed Int.max - 1")
    }
    return result
  }

  @_inlineable
  public func _advanced(by n: Stride, count i: Int) -> Self {
    return advanced(by: Stride(i) * n)
  }

  @_inlineable
  public static func _step(
    after current: (index: Int?, value: Self),
    from start: Self, by distance: Self.Stride
  ) -> (index: Int?, value: Self) {
    return (nil, current.value.advanced(by: distance))
  }
}

extension Strideable where Stride : FloatingPoint {
  @_inlineable
  public func _steps(to other: Self, by n: Stride) -> Int {
    let distance = self.distance(to: other)
    _precondition(n != 0 && distance != 0)
    guard (n < 0) == (distance < 0) else { return 0 }

    // Note: For a floating-point type, striding from `self` to `other` by `n`
    // may produce different values than striding from `other` to `self` by
    // `-n`. This is why we cannot simply write
    //
    //   let (a, b, c) = self < other ? (self, other, n) : (other, self, -n)
    //
    // and proceed accordingly.

    var low = 0, mid = Int.max / 2, high = Int.max
    if n > 0 {
      guard other <= _advanced(by: n, count: high) else {
        fatalError("Steps from \(self) to \(other) exceed Int.max - 1")
      }

      // Note: For a floating-point type, it is possible that
      // `a._advanced(by: b, count: i) == a._advanced(by: b, count: i + 1)` for
      // some values of `a`, `b`, and `i`, due to rounding. This is why we must
      // not stop our search prematurely if we find a value for `mid` such that
      // `_advanced(by: n, count: mid) == other`.

      while mid > low {
        if _advanced(by: n, count: mid) < other {
          low = mid
        } else {
          high = mid
        }
        mid = low + (high - low) / 2
      }
    } else {
      guard other >= _advanced(by: n, count: high) else {
        fatalError("Steps from \(self) to \(other) exceed Int.max - 1")
      }
      while mid > low {
        if _advanced(by: n, count: mid) > other {
          low = mid
        } else {
          high = mid
        }
        mid = low + (high - low) / 2
      }
    }
    return low
  }

  @_inlineable
  public func _advanced(by n: Stride, count i: Int) -> Self {
    return advanced(by: Stride(i) * n)
  }
}

extension Strideable where Self : FloatingPoint, Self == Stride {
  @_inlineable
  public func _advanced(by n: Stride, count i: Int) -> Self {
    // When both Self and Stride are the same floating-point type, we should
    // take advantage of fused multiply-add (where supported) to eliminate
    // intermediate rounding error.
    return addingProduct(Stride(i), n)
  }
}

/// An iterator for `StrideTo<Element>`.
@_fixed_layout
public struct StrideToIterator<Element : Strideable> : IteratorProtocol {
  @_versioned
  internal let _start: Element

  @_versioned
  internal let _end: Element

  @_versioned
  internal let _stride: Element.Stride

  @_versioned
  internal var _current: (index: Int?, value: Element)

  @_inlineable
  @_versioned
  internal init(_start: Element, end: Element, stride: Element.Stride) {
    self._start = _start
    _end = end
    _stride = stride
    _current = (0, _start)
  }

  /// Advances to the next element and returns it, or `nil` if no next element
  /// exists.
  ///
  /// Once `nil` has been returned, all subsequent calls return `nil`.

  @_inlineable
  public mutating func next() -> Element? {
    let result = _current.value
    if _stride > 0 ? result >= _end : result <= _end {
      return nil
    }
    _current = Element._step(after: _current, from: _start, by: _stride)
    return result
  }
}

/// A `RandomAccessCollection` of values formed by striding over a half-open
/// interval.
@_fixed_layout
public struct StrideTo<
  Element : Strideable
> : RandomAccessCollection, CustomReflectable {
  /// Returns an iterator over the elements of this sequence.
  ///
  /// - Complexity: O(1).
  @_inlineable
  public func makeIterator() -> StrideToIterator<Element> {
    return StrideToIterator(_start: _start, end: _end, stride: _stride)
  }

  @_inlineable
  public func _preprocessingPass<R>(
    _ preprocess: () throws -> R
  ) rethrows -> R? {
    return try preprocess()
  }

  @_inlineable
  public func _customContainsEquatableElement(
    _ element: Element
  ) -> Bool? {
    if element < _start || _end <= element {
      return false
    }
    return nil
  }

  @_inlineable
  @_versioned
  internal init(_start: Element, end: Element, stride: Element.Stride) {
    _precondition(stride != 0, "Stride size must not be zero")
    // At start, striding away from end is allowed; it just makes for an
    // already-empty Sequence.
    self._start = _start
    self._end = end
    self._stride = stride
  }

  @_versioned
  internal let _start: Element

  @_versioned
  internal let _end: Element

  @_versioned
  internal let _stride: Element.Stride

  @_inlineable // FIXME(sil-serialize-all)
  public var customMirror: Mirror {
    return Mirror(self, children: ["from": _start, "to": _end, "by": _stride])
  }

//===----------------------------------------------------------------------===//
// `RandomAccessCollection` conformance
//===----------------------------------------------------------------------===//

  public typealias Index = Int
  public typealias SubSequence = RandomAccessSlice<StrideTo<Element>>
  public typealias Indices = CountableRange<Int>

  @_inlineable
  public var startIndex: Index { return 0 }

  @_inlineable
  public var endIndex: Index { return count }

  @_inlineable
  public var count: Int {
    let distance = _start.distance(to: _end)
    guard distance != 0 && (distance < 0) == (_stride < 0) else { return 0 }
    return _start._steps(to: _end, by: _stride) + 1
  }

  public subscript(position: Index) -> Element {
    _failEarlyRangeCheck(position, bounds: startIndex..<endIndex)
    return _start._advanced(by: _stride, count: position)
  }

  public subscript(
    bounds: Range<Index>
  ) -> RandomAccessSlice<StrideTo<Element>> {
    _failEarlyRangeCheck(bounds, bounds: startIndex..<endIndex)
    return RandomAccessSlice(base: self, bounds: bounds)
  }

  @_inlineable
  public func index(after i: Index) -> Index {
    _failEarlyRangeCheck(i, bounds: (startIndex - 1)..<endIndex)
    return i + 1
  }

  @_inlineable
  public func index(before i: Index) -> Index {
    _failEarlyRangeCheck(i, bounds: (startIndex + 1)...endIndex)
    return i - 1
  }
}

/// Returns the sequence of values (`self`, `self + stride`, `self +
/// 2 * stride`, ... *last*) where *last* is the last value in the
/// progression that is less than `end`.
@_inlineable
public func stride<T>(
  from start: T, to end: T, by stride: T.Stride
) -> StrideTo<T> {
  return StrideTo(_start: start, end: end, stride: stride)
}

/// An iterator for `StrideThrough<Element>`.
@_fixed_layout
public struct StrideThroughIterator<Element : Strideable> : IteratorProtocol {
  @_versioned
  internal let _start: Element

  @_versioned
  internal let _end: Element

  @_versioned
  internal let _stride: Element.Stride

  @_versioned
  internal var _current: (index: Int?, value: Element)

  @_versioned
  internal var _didReturnEnd: Bool = false

  @_inlineable
  @_versioned
  internal init(_start: Element, end: Element, stride: Element.Stride) {
    self._start = _start
    _end = end
    _stride = stride
    _current = (0, _start)
  }

  /// Advances to the next element and returns it, or `nil` if no next element
  /// exists.
  ///
  /// Once `nil` has been returned, all subsequent calls return `nil`.
  @_inlineable
  public mutating func next() -> Element? {
    let result = _current.value
    if _stride > 0 ? result >= _end : result <= _end {
      // This check is needed because if we just changed the above operators
      // to > and <, respectively, we might advance current past the end
      // and throw it out of bounds (e.g. above Int.max) unnecessarily.
      if result == _end && !_didReturnEnd {
        _didReturnEnd = true
        return result
      }
      return nil
    }
    _current = Element._step(after: _current, from: _start, by: _stride)
    return result
  }
}

/// A `RandomAccessCollection` of values formed by striding over a closed
/// interval.
@_fixed_layout
public struct StrideThrough<
  Element : Strideable
> : RandomAccessCollection, CustomReflectable {
  /// Returns an iterator over the elements of this sequence.
  ///
  /// - Complexity: O(1).
  @_inlineable
  public func makeIterator() -> StrideThroughIterator<Element> {
    return StrideThroughIterator(_start: _start, end: _end, stride: _stride)
  }

  @_inlineable
  public func _preprocessingPass<R>(
    _ preprocess: () throws -> R
  ) rethrows -> R? {
    return try preprocess()
  }

  @_inlineable
  public func _customContainsEquatableElement(
    _ element: Element
  ) -> Bool? {
    if element < _start || _end < element {
      return false
    }
    return nil
  }

  @_inlineable
  @_versioned
  internal init(_start: Element, end: Element, stride: Element.Stride) {
    _precondition(stride != 0, "Stride size must not be zero")
    self._start = _start
    self._end = end
    self._stride = stride
  }

  @_versioned
  internal let _start: Element
  @_versioned
  internal let _end: Element
  @_versioned
  internal let _stride: Element.Stride

  @_inlineable // FIXME(sil-serialize-all)
  public var customMirror: Mirror {
    return Mirror(self,
      children: ["from": _start, "through": _end, "by": _stride])
  }

//===----------------------------------------------------------------------===//
// `RandomAccessCollection` conformance
//===----------------------------------------------------------------------===//

  public typealias Index = ClosedRangeIndex<Int>
  public typealias IndexDistance = Int
  public typealias SubSequence = RandomAccessSlice<StrideThrough<Element>>

  @_inlineable
  public var startIndex: Index {
    let distance = _start.distance(to: _end)
    return distance == 0 || (distance < 0) == (_stride < 0)
      ? ClosedRangeIndex(0) : ClosedRangeIndex()
  }

  @_inlineable
  public var endIndex: Index { return ClosedRangeIndex() }

  @_inlineable
  public var count: Int {
    let distance = _start.distance(to: _end)
    guard distance != 0 else { return 1 }
    guard (distance < 0) == (_stride < 0) else { return 0 }
    let i = _start._steps(to: _end, by: _stride) + 1
    return _start._advanced(by: _stride, count: i) == _end ? i + 1 : i
  }

  public subscript(position: Index) -> Element {
    return _start._advanced(by: _stride, count: position._dereferenced)
  }

  public subscript(
    bounds: Range<Index>
  ) -> RandomAccessSlice<StrideThrough<Element>> {
    return RandomAccessSlice(base: self, bounds: bounds)
  }

  @_inlineable
  public func index(before i: Index) -> Index {
    switch i._value {
    case .inRange(let n):
      _precondition(n > 0, "Incrementing past start index")
      return ClosedRangeIndex(n - 1)
    case .pastEnd:
      _precondition(_end >= _start, "Incrementing past start index")
      return ClosedRangeIndex(count - 1)
    }
  }

  @_inlineable
  public func index(after i: Index) -> Index {
    switch i._value {
    case .inRange(let n):
      return n == (count - 1)
        ? ClosedRangeIndex()
        : ClosedRangeIndex(n + 1)
    case .pastEnd:
      _preconditionFailure("Incrementing past end index")
    }
  }

  // FIXME(ABI)#175 (Type checker)
  @_inlineable
  public // WORKAROUND: needed because of rdar://25584401
  var indices: DefaultRandomAccessIndices<StrideThrough<Element>> {
    return DefaultRandomAccessIndices(
      _elements: self,
      startIndex: self.startIndex,
      endIndex: self.endIndex)
  }
}

/// Returns the sequence of values (`self`, `self + stride`, `self +
/// 2 * stride`, ... *last*) where *last* is the last value in the
/// progression less than or equal to `end`.
///
/// - Note: There is no guarantee that `end` is an element of the sequence.
@_inlineable
public func stride<T>(
  from start: T, through end: T, by stride: T.Stride
) -> StrideThrough<T> {
  return StrideThrough(_start: start, end: end, stride: stride)
}
