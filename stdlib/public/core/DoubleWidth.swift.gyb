//===--- DoubleWidth.swift.gyb --------------------------------*- swift -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

/// A fixed-width integer that is twice the size of its base type.
///
/// You can use the `DoubleWidth` type to continue calculations with the result
/// of a full width arithmetic operation. Normally, when you perform a full
/// width operation, the result is a tuple of the high and low components of
/// the result.
///
///     let a = 2241543570477705381
///     let b = 186319822866995413
///     let c = a.multipliedFullWidth(by: b)
///     // c == (22640526660490081, 7959093232766896457)
///
/// The tuple `c` can't be used in any further comparisons or calculations. To
/// use this value, create a `DoubleWidth` instance from the result. You can
/// use the `DoubleWidth` instance the way you use any other integer type.
///
///     let d = DoubleWidth(a.multipliedFullWidth(by: b))
///     // d == 417644001000058515200174966092417353
///
///     // Check the calculation:
///     print(d / DoubleWidth(a) == b)
///     // Prints "true"
///
///     if d > Int.max {
///         print("Too big to be an 'Int'!")
///     } else {
///         print("Small enough to fit in an 'Int'")
///     }
///     // Prints "Too big to be an 'Int'!"
///
/// The `DoubleWidth` type is intended for intermediate calculations, not as a
/// replacement for a variable-width integer type. Nesting `DoubleWidth`
/// instances, in particular, can result in undesirable performance.
@_fixed_layout // FIXME(sil-serialize-all)
public struct DoubleWidth<Base : FixedWidthInteger>
  : _ExpressibleByBuiltinIntegerLiteral
  where Base.Words : Collection, Base.Magnitude.Words : Collection {    

  public typealias High = Base
  public typealias Low = Base.Magnitude

#if _endian(big)
  @_versioned // FIXME(sil-serialize-all)
  internal var _storage: (high: High, low: Low)
#else
  @_versioned // FIXME(sil-serialize-all)
  internal var _storage: (low: Low, high: High)
#endif

  @_inlineable // FIXME(sil-serialize-all)
  public var high: High {
    return _storage.high
  }

  @_inlineable // FIXME(sil-serialize-all)
  public var low: Low {
    return _storage.low
  }

  @_inlineable // FIXME(sil-serialize-all)
  public // @testable
  init(_ _value: (High, Low)) {
#if _endian(big)
    self._storage = (high: _value.0, low: _value.1)
#else
    self._storage = (low: _value.1, high: _value.0)
#endif
  }

  @_inlineable // FIXME(sil-serialize-all)
  public init() {
    self.init((0, 0))
  }
}

extension DoubleWidth : CustomStringConvertible {
  @_inlineable // FIXME(sil-serialize-all)
  public var description: String {
    return String(self, radix: 10)
  }
}

extension DoubleWidth : CustomDebugStringConvertible {
  @_inlineable // FIXME(sil-serialize-all)
  public var debugDescription: String {
    return "(\(_storage.high), \(_storage.low))"
  }
}

extension DoubleWidth : Comparable {
  @_inlineable // FIXME(sil-serialize-all)
  public static func ==(lhs: DoubleWidth, rhs: DoubleWidth) -> Bool {
    return lhs._storage.low == rhs._storage.low &&
      lhs._storage.high == rhs._storage.high
  }

  @_inlineable // FIXME(sil-serialize-all)
  public static func <(lhs: DoubleWidth, rhs: DoubleWidth) -> Bool {
    if lhs._storage.high < rhs._storage.high {
      return true
    }
    if lhs._storage.high > rhs._storage.high {
      return false
    }
    return lhs._storage.low < rhs._storage.low
  }
}

extension DoubleWidth : Hashable {
  @_inlineable // FIXME(sil-serialize-all)
  public var hashValue: Int {
    var result = 0
    result = _combineHashValues(result, _storage.high.hashValue)
    result = _combineHashValues(result, _storage.low.hashValue)
    result = _mixInt(result)
    return result
  }
}

extension DoubleWidth : Numeric {
  public typealias Magnitude = DoubleWidth<Low>

  @_inlineable // FIXME(sil-serialize-all)
  public var magnitude: Magnitude {
    let result = Magnitude((
      Low(truncatingIfNeeded: _storage.high), _storage.low))
    if Base.isSigned && _storage.high < (0 as High) {
      return ~result &+ 1
    } else {
      return result
    }
  }

  @_inlineable // FIXME(sil-serialize-all)
  @_versioned // FIXME(sil-serialize-all)
  internal init(_ _magnitude: Magnitude) {
    self.init((High(_magnitude._storage.high), _magnitude._storage.low))
  }

  @_inlineable // FIXME(sil-serialize-all)
  public init<T : BinaryInteger>(_ source: T) {
    guard let result = DoubleWidth<Base>(exactly: source) else {
      _preconditionFailure("Value is outside the representable range")
    }
    self = result
  }

  @_inlineable // FIXME(sil-serialize-all)
  public init?<T : BinaryInteger>(exactly source: T) {
    // Can't represent a negative 'source' if Base is unsigned.
    guard DoubleWidth.isSigned || source >= 0 else { return nil }
    
    // Is 'source' entirely representable in Low?
    if let low = Low(exactly: source.magnitude) {
      self.init(source < (0 as T) ? (~0, ~low &+ 1) : (0, low))
    } else {
      // At this point we know source.bitWidth > Base.bitWidth, or else we
      // would've taken the first branch.
      let lowInT = source & T(~0 as Low)
      let highInT = source >> Low.bitWidth
      
      let low = Low(lowInT)
      guard let high = High(exactly: highInT) else { return nil }
      self.init((high, low))
    }
  }
}

extension DoubleWidth : FixedWidthInteger {
  @_fixed_layout // FIXME(sil-serialize-all)
  public struct Words : Collection {
    @_fixed_layout // FIXME(sil-serialize-all)
    public enum _IndexValue {
      case low(Low.Words.Index)
      case high(High.Words.Index)
    }
    
    @_fixed_layout // FIXME(sil-serialize-all)
    public struct Index : Comparable {
      public var _value: _IndexValue

      @_inlineable // FIXME(sil-serialize-all)
      public init(_ _value: _IndexValue) { self._value = _value }

      @_inlineable // FIXME(sil-serialize-all)
      public static func ==(lhs: Index, rhs: Index) -> Bool {
        switch (lhs._value, rhs._value) {
        case let (.low(l), .low(r)): return l == r
        case let (.high(l), .high(r)): return l == r
        default: return false
        }
      }

      @_inlineable // FIXME(sil-serialize-all)
      public static func <(lhs: Index, rhs: Index) -> Bool {
        switch (lhs._value, rhs._value) {
        case let (.low(l), .low(r)): return l < r
        case (.low(_), .high(_)): return true
        case (.high(_), .low(_)): return false
        case let (.high(l), .high(r)): return l < r
        }
      }
    }

    public var _high: High.Words
    public var _low: Low.Words

    @_inlineable // FIXME(sil-serialize-all)
    public init(_ value: DoubleWidth<Base>) {
      // Multiples of word size only.
      guard Base.bitWidth == Base.Magnitude.bitWidth &&
        (UInt.bitWidth % Base.bitWidth == 0 ||
        Base.bitWidth % UInt.bitWidth == 0) else {
        fatalError("Access to words is not supported on this type")
      }
      self._high = value._storage.high.words
      self._low = value._storage.low.words
      _sanityCheck(!_low.isEmpty)
    }

    @_inlineable // FIXME(sil-serialize-all)
    public var startIndex: Index {
      return Index(.low(_low.startIndex))
    }

    @_inlineable // FIXME(sil-serialize-all)
    public var endIndex: Index {
      return Index(.high(_high.endIndex))
    }
    
    @_inlineable // FIXME(sil-serialize-all)
    public var count: Int {
      if Base.bitWidth < UInt.bitWidth { return 1 }
      return Int(_low.count) + Int(_high.count)
    }
  
    @_inlineable // FIXME(sil-serialize-all)
    public func index(after i: Index) -> Index {
      switch i._value {
      case let .low(li):
        if Base.bitWidth < UInt.bitWidth {
          return Index(.high(_high.endIndex)) 
        }
        let next = _low.index(after: li)
        if next == _low.endIndex { 
          return Index(.high(_high.startIndex)) 
        }
        return Index(.low(next))
      case let .high(hi):
        return Index(.high(_high.index(after: hi)))
      }
    }
  
    @_inlineable // FIXME(sil-serialize-all)
    public subscript(_ i: Index) -> UInt {
      if Base.bitWidth < UInt.bitWidth {
        _precondition(i == Index(.low(_low.startIndex)), "Invalid index")
        _sanityCheck(2 * Base.bitWidth <= UInt.bitWidth)
        return _low.first! | (_high.first! &<< Base.bitWidth._lowWord) 
      }
      switch i._value {
      case let .low(li): return _low[li]
      case let .high(hi): return _high[hi]
      }
    }
  }

  @_inlineable // FIXME(sil-serialize-all)
  public var words: Words {
    return Words(self)
  }

  @_inlineable // FIXME(sil-serialize-all)
  public static var isSigned: Bool {
    return Base.isSigned
  }

  @_inlineable // FIXME(sil-serialize-all)
  public static var max: DoubleWidth {
    return self.init((High.max, Low.max))
  }

  @_inlineable // FIXME(sil-serialize-all)
  public static var min: DoubleWidth {
    return self.init((High.min, Low.min))
  }

  @_inlineable // FIXME(sil-serialize-all)
  public static var bitWidth: Int {
    return High.bitWidth + Low.bitWidth
  }

  /// Returns the quotient and remainder after dividing the three parts of `lhs`
  /// by `rhs`.
  ///
  /// This operation is conceptually that described by Burnikel and Ziegler
  /// (1998).
  @_versioned
  internal static func _divide(
    _ lhs: (high: Low, low: Magnitude), by rhs: Magnitude
  ) -> (quotient: Low, remainder: Magnitude) {
    // Unchecked preconditions:
    //   - rhs.leadingZeroBitCount == 0
    //   - lhs.high > 0
    //   - Magnitude((lhs.high, lhs.low.high)) < rhs

    // Estimate the quotient.
    var q = lhs.high == rhs.high
      ? Low.max
      : rhs.high.dividingFullWidth((lhs.high, lhs.low.high)).quotient

    // Compute the product q * rhs.
    // TODO: This could be performed more efficiently.
    let p1 = q.multipliedFullWidth(by: rhs.high)
    let p2 = q.multipliedFullWidth(by: rhs.low)
    let p =
      DoubleWidth<Magnitude>((Magnitude(), Magnitude((p2.high, p2.low)))) +
        DoubleWidth<Magnitude>((
          Magnitude((0, p1.high)), Magnitude((p1.low, 0))))

    // Compute the remainder, after decrementing q as necessary.
    var r = DoubleWidth<Magnitude>((Magnitude((0, lhs.high)), lhs.low))
    while r < p {
      q = q &- 1
      r += DoubleWidth<Magnitude>((0, rhs))
    }
    r -= p
    _sanityCheck(r.high == (0 as Magnitude))

    return (q, Magnitude(r))
  }

% for (operator, name) in [('+', 'adding'), ('-', 'subtracting')]:
%   highAffectedByLowOverflow = 'Base.max' if operator == '+' else 'Base.min'
  @_inlineable // FIXME(sil-serialize-all)
  public func ${name}ReportingOverflow(_ rhs: DoubleWidth)
    -> (partialValue: DoubleWidth, overflow: Bool) {
    let (low, lowOverflow) =
      _storage.low.${name}ReportingOverflow(rhs._storage.low)
    let (high, highOverflow) =
      _storage.high.${name}ReportingOverflow(rhs._storage.high)
    let result = (high &${operator} (lowOverflow ? 1 : 0), low)
    let overflow = highOverflow ||
      high == ${highAffectedByLowOverflow} && lowOverflow
    return (partialValue: DoubleWidth(result), overflow: overflow)
  }
% end

  @_inlineable // FIXME(sil-serialize-all)
  public func multipliedReportingOverflow(
    by rhs: DoubleWidth
  ) -> (partialValue: DoubleWidth, overflow: Bool) {
    let (carry, product) = multipliedFullWidth(by: rhs)
    let result = DoubleWidth(truncatingIfNeeded: product)
    
    let isNegative = (self < (0 as DoubleWidth)) != (rhs < (0 as DoubleWidth))
    let didCarry = isNegative
      ? carry != ~(0 as DoubleWidth)
      : carry != (0 as DoubleWidth)
    let hadPositiveOverflow = !isNegative &&
      DoubleWidth.isSigned && product.leadingZeroBitCount == 0

    return (result, didCarry || hadPositiveOverflow)
  }

  @_inlineable // FIXME(sil-serialize-all)
  public func quotientAndRemainder(
    dividingBy other: DoubleWidth
  ) -> (quotient: DoubleWidth, remainder: DoubleWidth) {
    // FIXME: Currently, 64-bit full-width division is implemented by calling
    // this function, so we must stop that.
    var rhs = other.magnitude
    let rlz = rhs.leadingZeroBitCount
    if rlz == DoubleWidth.bitWidth { fatalError("Division by zero") }

    var lhs = self.magnitude
    let llz = lhs.leadingZeroBitCount
    if rlz < llz { return (0, self) }

    let isNegative = (self < (0 as DoubleWidth)) != (other < (0 as DoubleWidth))

    if rlz == llz {
      if rhs > lhs { return (0, self) }
      // Since rhs != 0 (see above), the quotient must be 1 or -1.
      let r = lhs - rhs
      let remainder = self < (0 as DoubleWidth)
        ? 0 - DoubleWidth(r)
        : DoubleWidth(r)
      return isNegative ? (0 - 1, remainder) : (1, remainder)
    }

    if rlz >= Low.bitWidth {
      if llz >= Low.bitWidth {
        let (q, r) = lhs.low.quotientAndRemainder(dividingBy: rhs.low)
        let remainder = self < (0 as DoubleWidth)
          ? 0 - DoubleWidth(r)
          : DoubleWidth(r)
        return isNegative
          ? (0 - DoubleWidth(q), remainder)
          : (DoubleWidth(q), remainder)
      }
      let (q1, r1) = lhs.high.quotientAndRemainder(dividingBy: rhs.low)
      let (q2, r2) = r1 == 0
        ? lhs.low.quotientAndRemainder(dividingBy: rhs.low)
        : rhs.low.dividingFullWidth((r1, lhs.low))
      let remainder = self < (0 as DoubleWidth)
        ? 0 - DoubleWidth(r2)
        : DoubleWidth(r2)
      return isNegative
        ? (0 - DoubleWidth(Magnitude((q1, q2))), remainder)
        : (DoubleWidth(Magnitude((q1, q2))), remainder)
    }

    // Shift both rhs and lhs.
    rhs &<<= rlz
    let highInLHS = (lhs &>> (Magnitude.bitWidth &- rlz)).low
    lhs &<<= rlz

    // Perform a divide-three-halves-by-two operation.
    let (q, r) = DoubleWidth._divide((highInLHS, lhs), by: rhs)
    let remainder = self < (0 as DoubleWidth)
      ? 0 - DoubleWidth(r &>> rlz)
      : DoubleWidth(r &>> rlz)
    return isNegative
      ? (0 - DoubleWidth(q), remainder)
      : (DoubleWidth(q), remainder)
  }

  @_inlineable // FIXME(sil-serialize-all)
  public func dividedReportingOverflow(
    by other: DoubleWidth
  ) -> (partialValue: DoubleWidth, overflow: Bool) {
    if other == (0 as DoubleWidth) ||
      (DoubleWidth.isSigned && other == -1 && self == .min) {
      return (self, true)
    }
    return (quotientAndRemainder(dividingBy: other).quotient, false)
  }

  @_inlineable // FIXME(sil-serialize-all)
  public func remainderReportingOverflow(dividingBy other: DoubleWidth)
    -> (partialValue: DoubleWidth, overflow: Bool) {
    if other == (0 as DoubleWidth) { return (self, true) }
    if DoubleWidth.isSigned && other == -1 && self == .min { return (0, true) }
    return (quotientAndRemainder(dividingBy: other).remainder, false)
  }

  @_inlineable // FIXME(sil-serialize-all)
  public func multipliedFullWidth(
    by other: DoubleWidth
  ) -> (high: DoubleWidth, low: DoubleWidth.Magnitude) {
    let isNegative = DoubleWidth.isSigned &&
      (self < (0 as DoubleWidth)) != (other < (0 as DoubleWidth))

    func mul(_ x: Low, _ y: Low) -> (partial: Low, carry: Low) {
      let (high, low) = x.multipliedFullWidth(by: y)
      return (low, high)
    }
        
    func sum(_ x: Low, _ y: Low, _ z: Low) -> (partial: Low, carry: Low) {
      let (sum1, overflow1) = x.addingReportingOverflow(y)
      let (sum2, overflow2) = sum1.addingReportingOverflow(z)
      let carry: Low = (overflow1 ? 1 : 0) + (overflow2 ? 1 : 0)
      return (sum2, carry)
    }
        
    let lhs = self.magnitude
    let rhs = other.magnitude
        
    let a = mul(rhs._storage.low, lhs._storage.low)
    let b = mul(rhs._storage.low, lhs._storage.high)
    let c = mul(rhs._storage.high, lhs._storage.low)
    let d = mul(rhs._storage.high, lhs._storage.high)
        
    let mid1 = sum(a.carry, b.partial, c.partial)
    let mid2 = sum(b.carry, c.carry, d.partial)
        
    let low = DoubleWidth<Low>((mid1.partial, a.partial))
    let high = DoubleWidth((
      High(mid2.carry + d.carry), mid1.carry + mid2.partial))
        
    if isNegative {
      let (lowComplement, overflow) = (~low).addingReportingOverflow(1)
      return (~high + (overflow ? 1 : 0), lowComplement)
    } else {
      return (high, low)
    }
  }

  @_inlineable // FIXME(sil-serialize-all)
  public func dividingFullWidth(
    _ dividend: (high: DoubleWidth, low: DoubleWidth.Magnitude)
  ) -> (quotient: DoubleWidth, remainder: DoubleWidth) {
    var rhs = self.magnitude
    if rhs == (0 as Magnitude) { fatalError("Division by zero") }

    let other = DoubleWidth<DoubleWidth>(dividend)
    var lhs = other.magnitude
    if rhs < lhs.high { fatalError("Division results in an overflow") }

    let isNegative =
      (self < (0 as DoubleWidth)) != (other.high < (0 as DoubleWidth))

    if lhs.high == (0 as Magnitude) {
      if rhs > lhs.low { return (0, DoubleWidth(other)) }
      let (q, r) = lhs.low.quotientAndRemainder(dividingBy: rhs)
      let remainder = other.high < (0 as DoubleWidth)
        ? 0 - DoubleWidth(r)
        : DoubleWidth(r)
      return isNegative
        ? (0 - DoubleWidth(q), remainder)
        : (DoubleWidth(q), remainder)
    }

    if rhs.high == (0 as Low) {
      let r1 = lhs.high.high % rhs.low
      let r2 = rhs.low.dividingFullWidth((r1, lhs.high.low)).remainder
      let (q1, r3) = rhs.low.dividingFullWidth((r2, lhs.low.high))
      let (q2, r4) = rhs.low.dividingFullWidth((r3, lhs.low.low))
      let remainder = other.high < (0 as DoubleWidth)
        ? 0 - DoubleWidth(r4)
        : DoubleWidth(r4)
      return isNegative
        ? (0 - DoubleWidth(Magnitude((q1, q2))), remainder)
        : (DoubleWidth(Magnitude((q1, q2))), remainder)
    }

    // Shift both rhs and lhs.
    let rlz = rhs.leadingZeroBitCount
    rhs &<<= rlz
    lhs &<<= rlz

    let midInLHS = Magnitude((lhs.high.low, lhs.low.high))
    // Perform a divide-three-halves-by-two operation either once or twice.
    if lhs.high.high == 0 && midInLHS < rhs {
      let (q, r) = DoubleWidth._divide((lhs.high.low, lhs.low), by: rhs)
      let remainder = other.high < (0 as DoubleWidth)
        ? 0 - DoubleWidth(r &>> rlz)
        : DoubleWidth(r &>> rlz)
      return isNegative
        ? (0 - DoubleWidth(q), remainder)
        : (DoubleWidth(q), remainder)
    }
    let (q1, r1) = DoubleWidth._divide((lhs.high.high, midInLHS), by: rhs)
    let (q2, r2) =
      DoubleWidth._divide((r1.high, Magnitude((r1.low, lhs.low.low))), by: rhs)
    let remainder = other.high < (0 as DoubleWidth)
      ? 0 - DoubleWidth(r2 &>> rlz)
      : DoubleWidth(r2 &>> rlz)
    return isNegative
      ? (0 - DoubleWidth(Magnitude((q1, q2))), remainder)
      : (DoubleWidth(Magnitude((q1, q2))), remainder)
  }

% for operator in ['&', '|', '^']:
  @_inlineable // FIXME(sil-serialize-all)
  public static func ${operator}=(
    lhs: inout DoubleWidth, rhs: DoubleWidth
  ) {
    lhs._storage.low ${operator}= rhs._storage.low
    lhs._storage.high ${operator}= rhs._storage.high
  }
% end

  @_inlineable // FIXME(sil-serialize-all)
  public static func <<=(lhs: inout DoubleWidth, rhs: DoubleWidth) {
    if rhs < (0 as DoubleWidth) {
      lhs >>= 0 - rhs
      return
    }
    
    // Shift is larger than this type's bit width.
    if rhs._storage.high != (0 as High) ||
      rhs._storage.low >= DoubleWidth.bitWidth
    {
      lhs = 0
      return
    }

    lhs &<<= rhs
  }
  
  @_inlineable // FIXME(sil-serialize-all)
  public static func >>=(lhs: inout DoubleWidth, rhs: DoubleWidth) {
    if rhs < (0 as DoubleWidth) {
      lhs <<= 0 - rhs
      return
    }

    // Shift is larger than this type's bit width.
    if rhs._storage.high != (0 as High) ||
      rhs._storage.low >= DoubleWidth.bitWidth
    {
      lhs = lhs < (0 as DoubleWidth) ? ~0 : 0
      return
    }

    lhs &>>= rhs
  }
  
  @_inlineable // FIXME(sil-serialize-all)
  public static func &<<=(lhs: inout DoubleWidth, rhs: DoubleWidth) {
    let rhs = rhs & DoubleWidth(DoubleWidth.bitWidth &- 1)

    guard rhs._storage.low < Base.bitWidth else {
      lhs._storage.high = High(
        truncatingIfNeeded: lhs._storage.low &<<
          (rhs._storage.low &- Low(Base.bitWidth)))
      lhs._storage.low = 0
      return
    }

    guard rhs._storage.low != (0 as Low) else { return }
    lhs._storage.high &<<= High(rhs._storage.low)
    lhs._storage.high |= High(
      truncatingIfNeeded: lhs._storage.low &>>
        (Low(Base.bitWidth) &- rhs._storage.low))
    lhs._storage.low &<<= rhs._storage.low
  }
  
  @_inlineable // FIXME(sil-serialize-all)
  public static func &>>=(lhs: inout DoubleWidth, rhs: DoubleWidth) {
    let rhs = rhs & DoubleWidth(DoubleWidth.bitWidth &- 1)

    guard rhs._storage.low < Base.bitWidth else {
      lhs._storage.low = Low(
        truncatingIfNeeded: lhs._storage.high &>>
          High(rhs._storage.low &- Low(Base.bitWidth)))
      lhs._storage.high = lhs._storage.high < (0 as High) ? ~0 : 0
      return
    }

    guard rhs._storage.low != (0 as Low) else { return }
    lhs._storage.low &>>= rhs._storage.low
    lhs._storage.low |= Low(
      truncatingIfNeeded: lhs._storage.high &<<
        High(Low(Base.bitWidth) &- rhs._storage.low))
    lhs._storage.high &>>= High(rhs._storage.low)
  }
  
%{
binaryOperators = [
  ('+', 'adding', '_', '+'),
  ('-', 'subtracting', '_', '-'),
  ('*', 'multiplied', 'by', '*'),
  ('/', 'divided', 'by', '/'),
  ('%', 'remainder', 'dividingBy', '/'),
]
}%
% for (operator, name, firstArg, kind) in binaryOperators:

  // FIXME(integers): remove this once the operators are back to Numeric
  @_inlineable // FIXME(sil-serialize-all)
  public static func ${operator} (
    lhs: DoubleWidth, rhs: DoubleWidth
  ) -> DoubleWidth {
    var lhs = lhs
    lhs ${operator}= rhs
    return lhs
  }

%   argumentLabel = (firstArg + ':') if firstArg != '_' else ''
  @_inlineable // FIXME(sil-serialize-all)
  public static func ${operator}=(
    lhs: inout DoubleWidth, rhs: DoubleWidth
  ) {
    let (result, overflow) = lhs.${name}ReportingOverflow(${argumentLabel}rhs)
    _precondition(!overflow, "Overflow in ${operator}=")
    lhs = result
  }
% end

  @_inlineable // FIXME(sil-serialize-all)
  public init(_truncatingBits bits: UInt) {
    _storage.low = Low(_truncatingBits: bits)
    _storage.high = High(_truncatingBits: bits >> UInt(Low.bitWidth))
  }

  @_inlineable // FIXME(sil-serialize-all)
  public init(_builtinIntegerLiteral _x: _MaxBuiltinIntegerType) {
    var _x = _x
    self = DoubleWidth()

    // If we can capture the entire literal in a single Int64, stop there.
    // This avoids some potential deep recursion due to literal expressions in
    // other DoubleWidth methods.
    let (_value, _overflow) = Builtin.s_to_s_checked_trunc_Int2048_Int64(_x)
    if !Bool(_overflow) {
      self = DoubleWidth(Int64(_value))
      return
    }

    // Convert all but the most significant 64 bits as unsigned integers.
    let _shift = Builtin.sext_Int64_Int2048((64 as Int64)._value)
    let lowWordCount = (bitWidth - 1) / 64
    for i in 0..<lowWordCount {
      let value =
        DoubleWidth(UInt64(Builtin.s_to_u_checked_trunc_Int2048_Int64(_x).0))
          &<< DoubleWidth(i * 64)
      self |= value
      _x = Builtin.ashr_Int2048(_x, _shift)
    }

    // Finally, convert the most significant 64 bits and check for overflow.
    let overflow: Bool
    if Base.isSigned {
      let (_value, _overflow) = Builtin.s_to_s_checked_trunc_Int2048_Int64(_x)
      self |= DoubleWidth(Int64(_value)) &<< DoubleWidth(lowWordCount * 64)
      overflow = Bool(_overflow)
    } else {
      let (_value, _overflow) = Builtin.s_to_u_checked_trunc_Int2048_Int64(_x)
      self |= DoubleWidth(UInt64(_value)) &<< DoubleWidth(lowWordCount * 64)
      overflow = Bool(_overflow)
    }
    _precondition(!overflow, "Literal integer out of range for this type")
  }

  @_inlineable // FIXME(sil-serialize-all)
  public var leadingZeroBitCount: Int {
    return high == (0 as High)
      ? High.bitWidth + low.leadingZeroBitCount
      : high.leadingZeroBitCount
  }

  @_inlineable // FIXME(sil-serialize-all)
  public var trailingZeroBitCount: Int {
    return low == (0 as Low)
      ? Low.bitWidth + high.trailingZeroBitCount
      : low.trailingZeroBitCount
  }

  @_inlineable // FIXME(sil-serialize-all)
  public var nonzeroBitCount: Int {
    return high.nonzeroBitCount + low.nonzeroBitCount
  }

  @_inlineable // FIXME(sil-serialize-all)
  @_transparent
  public var byteSwapped: DoubleWidth {
    return DoubleWidth((
      High(truncatingIfNeeded: low.byteSwapped),
      Low(truncatingIfNeeded: high.byteSwapped)
    ))
  }
}

extension DoubleWidth : UnsignedInteger where Base : UnsignedInteger {}

extension DoubleWidth : SignedNumeric, SignedInteger
  where Base : SignedInteger {}
