//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  allOrderings = [
    # Swift enum case,         Capitalized API name,    documentation name,        llvm name,   failure name, isLoad, isStore
    ('relaxed',                'Relaxed',               'relaxed',                 'monotonic', 'monotonic',  True,   True),
    ('acquiring',              'Acquiring',             'acquiring',               'acquire',   'acquire',    True,   False),
    ('releasing',              'Releasing',             'releasing',               'release',   'monotonic',  False,  True),
    ('acquiringAndReleasing',  'AcquiringAndReleasing', 'acquiring-and-releasing', 'acqrel',    'acquire',    False,  False),
    ('sequentiallyConsistent', '',                      'sequentially consistent', 'seqcst',    'seqcst',     True,   True)
  ]

  def loadOrderings():
    for (enumOrder, capitalOrder, docOrder, llvmOrder, failureOrder, isLoad, isStore) in allOrderings:
      if isLoad:
        yield (enumOrder, capitalOrder, docOrder, llvmOrder)

  def storeOrderings():
    for (enumOrder, capitalOrder, docOrder, llvmOrder, failureOrder, isLoad, isStore) in allOrderings:
      if isStore:
        yield (enumOrder, capitalOrder, docOrder, llvmOrder)

  integerOperations = [
    ('WrappingAdd', 'add', '&+'),
    (        'And', 'and', '&'),
    (         'Or', 'or',  '|'),
    (        'Xor', 'xor', '^')
  ]
}%

//------------------------------------------------------------------------------

extension UnsafeMutableRawPointer {
% for (enumOrder, capitalOrder, docOrder, llvmOrder) in loadOrderings():
  /// Atomically load the pointee with ${docOrder} ordering.
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${capitalOrder}LoadWord() -> UInt {
    return UInt(Builtin.atomicload_${llvmOrder}_Word(_rawValue))
  }
% end
}

extension UnsafeMutableRawPointer {
% for enumOrder, capitalOrder, docOrder, llvmOrder in storeOrderings():
  /// Atomically store the specified value in the memory referenced by this
  /// pointer, with ${docOrder} ordering.
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${capitalOrder}StoreWord(_ desired: UInt) {
    Builtin.atomicstore_${llvmOrder}_Word(_rawValue, desired._builtinWordValue)
  }
% end
}

extension UnsafeMutableRawPointer {
% for _, capitalOrder, docOrder, llvmOrder, failureOrder, _, _ in allOrderings:
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${capitalOrder}CompareExchangeWord(
    expected: inout UInt,
    desired: UInt
  ) -> Bool {
    let (oldValue, won) = Builtin.cmpxchg_${llvmOrder}_${failureOrder}_Word(
      _rawValue, expected._builtinWordValue, desired._builtinWordValue)
    expected = UInt(oldValue)
    return Bool(won)
  }
% end
}

extension UnsafeMutableRawPointer {
% for (swiftName, builtinName, operator) in integerOperations:
%   for _, capitalOrder, docOrder, llvmOrder, _, _, _ in allOrderings:
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${capitalOrder}FetchThen${swiftName}Word(_ operand: UInt) -> UInt {
    let value = Builtin.atomicrmw_${builtinName}_${llvmOrder}_Word(
      _rawValue, operand._builtinWordValue)
    return UInt(value)
  }
%   end
% end
}

//------------------------------------------------------------------------------

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeMutableRawPointer {
  @_transparent
  public func _atomicLoadWord(ordering: AtomicMemoryOrdering) -> UInt {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedLoadWord()
    case .acquiring:
      return _atomicAcquiringLoadWord()
    case .sequentiallyConsistent:
      return _atomicLoadWord()
    case .releasing, .acquiringAndReleasing:
      _preconditionFailure("invalid memory ordering for atomic load")
    default:
      return _atomicLoadWord()
    }
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeMutableRawPointer {
  @_transparent
  public func _atomicStoreWord(
    _ desired: UInt,
    ordering: AtomicMemoryOrdering
  ) {
    switch ordering {
    case .relaxed:
      _atomicRelaxedStoreWord(desired)
    case .releasing:
      _atomicReleasingStoreWord(desired)
    case .sequentiallyConsistent:
      _atomicStoreWord(desired)
    case .acquiring, .acquiringAndReleasing:
      _preconditionFailure("invalid memory ordering for atomic store")
    default:
      _atomicStoreWord(desired)
    }
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeMutableRawPointer {
  @_transparent
  public func _atomicCompareExchangeWord(
    expected: inout UInt,
    desired: UInt,
    ordering: AtomicMemoryOrdering
  ) -> Bool {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedCompareExchangeWord(
        expected: &expected,
        desired: desired)
    case .acquiring:
      return _atomicAcquiringCompareExchangeWord(
        expected: &expected,
        desired: desired)
    case .releasing:
      return _atomicReleasingCompareExchangeWord(
        expected: &expected,
        desired: desired)
    case .acquiringAndReleasing:
      return _atomicAcquiringAndReleasingCompareExchangeWord(
        expected: &expected,
        desired: desired)
    case .sequentiallyConsistent:
      return _atomicCompareExchangeWord(
        expected: &expected,
        desired: desired)
    default:
      return _atomicCompareExchangeWord(
        expected: &expected,
        desired: desired)
    }
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeMutableRawPointer {
% for (swiftName, _, op) in integerOperations:
  @_transparent
  @discardableResult
  public func _atomicFetchThen${swiftName}Word(
    _ operand: UInt,
    ordering: AtomicMemoryOrdering
  ) -> UInt {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedFetchThen${swiftName}Word(operand)
    case .acquiring:
      return _atomicAcquiringFetchThen${swiftName}Word(operand)
    case .releasing:
      return _atomicReleasingFetchThen${swiftName}Word(operand)
    case .acquiringAndReleasing:
      return _atomicAcquiringAndReleasingFetchThen${swiftName}Word(operand)
    case .sequentiallyConsistent:
      return _atomicFetchThen${swiftName}Word(operand)
    default:
      return _atomicFetchThen${swiftName}Word(operand)
    }
  }

% end
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeMutableRawPointer {
% for (swiftName, _, op) in integerOperations:
  @_transparent
  @discardableResult
  public func _atomic${swiftName}ThenFetchWord(
    _ operand: UInt,
    ordering: AtomicMemoryOrdering = .sequentiallyConsistent
  ) -> UInt {
    let old = _atomicFetchThen${swiftName}Word(operand, ordering: ordering)
    return old ${op} operand
  }

% end
}


//------------------------------------------------------------------------------
