//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  def rmwOrderings():
    return [
      # Swift enum case,         API name,     documentation name,        llvm name,   failure name
      ('relaxed',                'Relaxed',    'relaxed',                 'monotonic', 'monotonic'),
      ('acquiring',              'Acquiring',  'acquiring',               'acquire',   'acquire'),
      ('releasing',              'Releasing',  'releasing',               'release',   'monotonic'),
      ('acquiringAndReleasing',  '',           'acquiring-and-releasing', 'acqrel',    'acquire'),
    ]

  def loadOrderings():
    return [
      # Swift enum case,         API name,    doc name,     llvm name
      ('relaxed',                'Relaxed',   'relaxed',    'monotonic'),
      ('acquiring',              '',          'acquiring',  'acquire'),
    ]

  def storeOrderings():
    return [
      # Swift enum case,         API name,    doc name,     llvm name
      ('relaxed',                'Relaxed',   'relaxed',    'monotonic'),
      ('releasing',              '',          'releasing',  'release'),
    ]

  integerOperations = [
    #          API name, llvm name,  operator
    (     'WrappingAdd', 'add', '&+'),
    ('WrappingSubtract', 'sub', '&-'),
    (             'And', 'and', '&'),
    (              'Or', 'or',  '|'),
    (             'Xor', 'xor', '^')
  ]
}%

//------------------------------------------------------------------------------

extension UnsafeMutableRawPointer {
% for (enumOrder, apiOrder, docOrder, llvmOrder) in loadOrderings():
  /// Atomically load the pointee with ${docOrder} ordering.
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${apiOrder}LoadWord() -> UInt {
    return UInt(Builtin.atomicload_${llvmOrder}_Word(_rawValue))
  }
% end
}

extension UnsafeMutableRawPointer {
% for enumOrder, apiOrder, docOrder, llvmOrder in storeOrderings():
  /// Atomically store the specified value in the memory referenced by this
  /// pointer, with ${docOrder} ordering.
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${apiOrder}StoreWord(_ desired: UInt) {
    Builtin.atomicstore_${llvmOrder}_Word(_rawValue, desired._builtinWordValue)
  }
% end
}

extension UnsafeMutableRawPointer {
% for _, apiOrder, docOrder, llvmOrder, _ in rmwOrderings():
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${apiOrder}ExchangeWord(
    _ desired: UInt
  ) -> UInt {
    let oldValue = Builtin.atomicrmw_xchg_${llvmOrder}_Word(
      _rawValue, desired._builtinWordValue)
    return UInt(oldValue)
  }
% end
}

extension UnsafeMutableRawPointer {
% for _, apiOrder, docOrder, llvmOrder, failureOrder in rmwOrderings():
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${apiOrder}CompareExchangeWord(
    expected: inout UInt,
    desired: UInt
  ) -> Bool {
    let (oldValue, won) = Builtin.cmpxchg_${llvmOrder}_${failureOrder}_Word(
      _rawValue, expected._builtinWordValue, desired._builtinWordValue)
    expected = UInt(oldValue)
    return Bool(won)
  }
% end
}

extension UnsafeMutableRawPointer {
% for (swiftName, builtinName, operator) in integerOperations:
%   for _, apiOrder, docOrder, llvmOrder, _ in rmwOrderings():
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${apiOrder}FetchThen${swiftName}Word(_ operand: UInt) -> UInt {
    let value = Builtin.atomicrmw_${builtinName}_${llvmOrder}_Word(
      _rawValue, operand._builtinWordValue)
    return UInt(value)
  }
%   end
% end
}

//------------------------------------------------------------------------------

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeMutableRawPointer {
  @_transparent
  public func _atomicLoadWord(ordering: MemoryOrdering) -> UInt {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedLoadWord()
    case .acquiring:
      return _atomicLoadWord()
    case .releasing, .acquiringAndReleasing:
      _preconditionFailure("invalid memory ordering for atomic load")
    default:
      return _atomicLoadWord()
    }
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeMutableRawPointer {
  @_transparent
  public func _atomicStoreWord(
    _ desired: UInt,
    ordering: MemoryOrdering
  ) {
    switch ordering {
    case .relaxed:
      _atomicRelaxedStoreWord(desired)
    case .releasing:
      _atomicStoreWord(desired)
    case .acquiring, .acquiringAndReleasing:
      _preconditionFailure("invalid memory ordering for atomic store")
    default:
      _atomicStoreWord(desired)
    }
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeMutableRawPointer {
  @_transparent
  public func _atomicExchangeWord(
    _ desired: UInt,
    ordering: MemoryOrdering
  ) -> UInt {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedExchangeWord(desired)
    case .acquiring:
      return _atomicAcquiringExchangeWord(desired)
    case .releasing:
      return _atomicReleasingExchangeWord(desired)
    case .acquiringAndReleasing:
      return _atomicExchangeWord(desired)
    default:
      return _atomicExchangeWord(desired)
    }
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeMutableRawPointer {
  @_transparent
  public func _atomicCompareExchangeWord(
    expected: inout UInt,
    desired: UInt,
    ordering: MemoryOrdering
  ) -> Bool {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedCompareExchangeWord(
        expected: &expected,
        desired: desired)
    case .acquiring:
      return _atomicAcquiringCompareExchangeWord(
        expected: &expected,
        desired: desired)
    case .releasing:
      return _atomicReleasingCompareExchangeWord(
        expected: &expected,
        desired: desired)
    case .acquiringAndReleasing:
      return _atomicCompareExchangeWord(
        expected: &expected,
        desired: desired)
    default:
      return _atomicCompareExchangeWord(
        expected: &expected,
        desired: desired)
    }
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeMutableRawPointer {
% for (swiftName, _, op) in integerOperations:
  @_transparent
  @discardableResult
  public func _atomicFetchThen${swiftName}Word(
    _ operand: UInt,
    ordering: MemoryOrdering
  ) -> UInt {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedFetchThen${swiftName}Word(operand)
    case .acquiring:
      return _atomicAcquiringFetchThen${swiftName}Word(operand)
    case .releasing:
      return _atomicReleasingFetchThen${swiftName}Word(operand)
    case .acquiringAndReleasing:
      return _atomicFetchThen${swiftName}Word(operand)
    default:
      return _atomicFetchThen${swiftName}Word(operand)
    }
  }

% end
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeMutableRawPointer {
% for (swiftName, _, op) in integerOperations:
  @_transparent
  @discardableResult
  public func _atomic${swiftName}ThenFetchWord(
    _ operand: UInt,
    ordering: MemoryOrdering
  ) -> UInt {
    let old = _atomicFetchThen${swiftName}Word(operand, ordering: ordering)
    return old ${op} operand
  }
% end
}


//------------------------------------------------------------------------------
