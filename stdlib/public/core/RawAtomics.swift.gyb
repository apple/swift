//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  def rmwOrderings():
    return [
      # Swift enum case,         API name,     documentation name,        llvm name,   failure name
      ('relaxed',                'Relaxed',    'relaxed',                 'monotonic', 'monotonic'),
      ('acquiring',              'Acquiring',  'acquiring',               'acquire',   'acquire'),
      ('releasing',              'Releasing',  'releasing',               'release',   'monotonic'),
      ('acquiringAndReleasing',  '',           'acquiring-and-releasing', 'acqrel',    'acquire'),
    ]

  def loadOrderings():
    return [
      # Swift enum case,         API name,    doc name,     llvm name
      ('relaxed',                'Relaxed',   'relaxed',    'monotonic'),
      ('acquiring',              '',          'acquiring',  'acquire'),
    ]

  def storeOrderings():
    return [
      # Swift enum case,         API name,    doc name,     llvm name
      ('relaxed',                'Relaxed',   'relaxed',    'monotonic'),
      ('releasing',              '',          'releasing',  'release'),
    ]

  integerOperations = [
    # Swift name,        llvm name,  operator
    ('WrappingAdd',      'add',      '&+'),
    ('WrappingSubtract', 'sub',      '&-'),
    ('BitwiseAnd',       'and',      '&'),
    ('BitwiseOr',        'or',       '|'),
    ('BitwiseXor',       'xor',      '^')
  ]
}%

//------------------------------------------------------------------------------

extension UnsafeMutableRawPointer {
% for (enumOrder, apiOrder, docOrder, llvmOrder) in loadOrderings():
  /// Atomically load the pointee with ${docOrder} ordering.
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${apiOrder}LoadWord() -> UInt {
    return UInt(Builtin.atomicload_${llvmOrder}_Word(_rawValue))
  }
% end
}

extension UnsafeMutableRawPointer {
% for enumOrder, apiOrder, docOrder, llvmOrder in storeOrderings():
  /// Atomically store the specified value in the memory referenced by this
  /// pointer, with ${docOrder} ordering.
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${apiOrder}StoreWord(_ desired: UInt) {
    Builtin.atomicstore_${llvmOrder}_Word(_rawValue, desired._builtinWordValue)
  }
% end
}

extension UnsafeMutableRawPointer {
% for _, apiOrder, docOrder, llvmOrder, _ in rmwOrderings():
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${apiOrder}ExchangeWord(
    _ desired: UInt
  ) -> UInt {
    let oldValue = Builtin.atomicrmw_xchg_${llvmOrder}_Word(
      _rawValue, desired._builtinWordValue)
    return UInt(oldValue)
  }
% end
}

extension UnsafeMutableRawPointer {
% for _, apiOrder, docOrder, llvmOrder, failureOrder in rmwOrderings():
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${apiOrder}CompareExchangeWord(
    expected: inout UInt,
    desired: UInt
  ) -> Bool {
    let (oldValue, won) = Builtin.cmpxchg_${llvmOrder}_${failureOrder}_Word(
      _rawValue, expected._builtinWordValue, desired._builtinWordValue)
    expected = UInt(oldValue)
    return Bool(won)
  }
% end
}

extension UnsafeMutableRawPointer {
% for (swiftName, builtinName, operator) in integerOperations:
%   for _, apiOrder, docOrder, llvmOrder, _ in rmwOrderings():
  @_alwaysEmitIntoClient
  @_transparent
  public // backdeployment
  func _atomic${apiOrder}FetchThen${swiftName}Word(_ operand: UInt) -> UInt {
    let value = Builtin.atomicrmw_${builtinName}_${llvmOrder}_Word(
      _rawValue, operand._builtinWordValue)
    return UInt(value)
  }
%   end
% end
}
