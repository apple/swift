//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  rmwOrderings = [
    # View name               raw name     documentation name
    ("",                      "",          "acquiring and releasing"),
    ("Relaxed",               "Relaxed",   "relaxed"),
    ("Acquiring",             "Acquiring", "acquiring"),
    ("Releasing",             "Releasing", "releasing"),
    ("AcquiringAndReleasing", "",          "acquiring and releasing"),
  ]

  loadOrderings = [
    # ordering     raw API name,  doc name
    ("",           "",            "acquiring"),
    ("Relaxed",    "Relaxed",     "relaxed"),
    ("Acquiring",  "",            "acquiring"),
  ]

  storeOrderings = [
    # ordering     raw API name,  doc name
    ("",           "",            "releasing"),
    ("Relaxed",    "Relaxed",     "relaxed"),
    ("Releasing",  "",            "releasing"),
  ]

  def lowerFirst(str):
    return str[:1].lower() + str[1:] if str else ""

  def extensionSuffix(ordering):
    return "." + ordering if ordering else ""
}%

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
@frozen
public struct UnsafeAtomicInitializableReference<Instance: AnyObject> {
  @usableFromInline
  internal let _ptr: UnsafeMutableRawPointer

  @inlinable
  public init(_ pointer: UnsafeMutablePointer<Instance?>) {
    self._ptr = UnsafeMutableRawPointer(pointer)
  }
}

% for (Ordering, rawname, docname) in rmwOrderings:
%   if Ordering <> "":
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicInitializableReference {
  /// A view providing atomic operations on an `UnsafeAtomicUnmanaged` with
  /// ${docname} memory ordering.
  @frozen
  public struct ${Ordering} {
    @usableFromInline
    internal let _ptr: UnsafeMutableRawPointer

    @_transparent @_alwaysEmitIntoClient
    internal init(_pointer: UnsafeMutableRawPointer) {
      self._ptr = _pointer
    }
  }

  /// Returns a view providing atomic operations on this value with
  /// ${docname} memory ordering.
  @_transparent @_alwaysEmitIntoClient
  public var ${lowerFirst(Ordering)}: ${Ordering} {
    ${Ordering}(_pointer: _ptr)
  }
}
%   end
% end

% for (Ordering, RawOrdering, docname) in rmwOrderings:
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicInitializableReference${extensionSuffix(Ordering)} {
  @_transparent
  public func initialize(to value: __owned Instance) -> Instance {
    let desired = Unmanaged.passRetained(value)
    let desiredWord = UInt(bitPattern: desired.toOpaque())
    var expectedWord: UInt = 0
    let success = _ptr._atomic${RawOrdering}CompareExchangeWord(
      expected: &expectedWord,
      desired: desiredWord)
    if !success {
      // The reference has already been initialized. Balance the retain that
      // we performed on `desired`.
      desired.release()
    }
    _precondition(expectedWord != 0)
    let result = Unmanaged<Instance>.fromOpaque(
      UnsafeRawPointer(bitPattern: expectedWord)!)
    return result.takeUnretainedValue()
  }
}
% end

% for (Ordering, RawOrdering, docname) in loadOrderings:
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomicInitializableReference${extensionSuffix(Ordering)} {
  @_transparent
  public func load() -> Instance? {
    let value = _ptr._atomic${RawOrdering}LoadWord()
    guard let ptr = UnsafeRawPointer(bitPattern: value) else { return nil }
    return Unmanaged.fromOpaque(ptr).takeUnretainedValue()
  }
}
% end
