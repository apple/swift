//===--- glibc.modulemap.gyb ----------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

/// This is a semi-complete modulemap that maps glibc's headers in a roughly
/// similar way to the Darwin SDK modulemap. We do not take care to list every
/// single header which may be included by a particular submodule, so there can
/// still be issues if imported into the same context as one in which someone
/// included those headers directly.
///
/// It's not named just Glibc so that it doesn't conflict in the event of a
/// future official glibc modulemap.
module SwiftGlibc [system] {
% if CMAKE_SDK in ["LINUX", "ANDROID", "OPENBSD"]:
      link "m"
% end
% if CMAKE_SDK in ["LINUX", "FREEBSD", "OPENBSD", "CYGWIN"]:
  link "pthread"
  // FIXME: util contains rarely used functions and not usually needed. Unfortunately
  // link directive doesn't work in the submodule yet.
% if CMAKE_SDK != "OPENBSD":
  link "util"
% end
% end

% if CMAKE_SDK not in ["FREEBSD", "OPENBSD", "HAIKU"]:
  link "dl"
% end

% if CMAKE_SDK == "HAIKU":
  link "network"
  link "bsd"
  link "execinfo"
% end

% if CMAKE_SDK not in ["ANDROID"]:
  header "stdc-predef.h"
  header "features.h"
% end

  // C standard library
  header "complex.h"
  header "ctype.h"
  header "errno.h"
  header "fenv.h"
  header "float.h"
  header "inttypes.h"
  header "iso646.h"
% if CMAKE_SDK not in ["LINUX", "ANDROID"]:
  header "libutil.h"
% end
  header "limits.h"
  header "locale.h"
  header "math.h"
  header "pty.h"
  header "setjmp.h"
  header "signal.h"
  header "stdarg.h"
  header "stdbool.h"
  header "stddef.h"
  header "stdint.h"
  header "stdio.h"
  header "stdlib.h"
  header "string.h"
  header "tgmath.h"
  header "time.h"
% if CMAKE_SDK in ["OPENBSD"]:
  header "util.h"
% end
  header "utmp.h"

  // POSIX
% if CMAKE_SDK not in ["ANDROID"]:
  header "aio.h"
% end
  header "arpa/inet.h"
% if CMAKE_SDK not in ["LINUX", "ANDROID"]:
  header "bsd/ifaddrs.h"
  header "bsd/pty.h"
% end
  header "cpio.h"
  header "dirent.h"
  header "dlfcn.h"
  header "fcntl.h"
% if CMAKE_SDK not in ["ANDROID"]:
  header "fmtmsg.h"
% end
  header "fnmatch.h"
  header "ftw.h"
  header "glob.h"
  header "grp.h"
  header "iconv.h"
  header "ifaddrs.h"
  header "langinfo.h"
  header "libgen.h"
  header "link.h"
% if CMAKE_SDK not in ["ANDROID"]:
  header "monetary.h"
% end
  header "net/if.h"
  header "netdb.h"
  header "netinet/in.h"
  header "netinet/tcp.h"
  header "nl_types.h"
  header "poll.h"
  header "pthread.h"
  header "pwd.h"
  header "regex.h"
  header "sched.h"
  header "search.h"
  header "semaphore.h"
  header "spawn.h"
  header "strings.h"
% if CMAKE_SDK not in ["LINUX", "ANDROID"]:
  header "sys/event.h"
% end
  header "sys/file.h"
  header "sys/inotify.h"
  header "sys/ioctl.h"
  header "sys/ipc.h"
  header "sys/mman.h"
  header "sys/mount.h"
  header "sys/msg.h"
  header "sys/resource.h"
  header "sys/select.h"
  header "sys/sem.h"
  header "sys/sendfile.h"
  header "sys/shm.h"
  header "sys/socket.h"
  header "sys/stat.h"
  header "sys/statvfs.h"
  header "sys/time.h"
  header "sys/times.h"
  header "sys/types.h"
  header "sys/uio.h"
  header "sys/un.h"
  header "sys/user.h"
  header "sys/utsname.h"
  header "sys/wait.h"
  header "sysexits.h"
  header "syslog.h"
  header "tar.h"
  header "termios.h"
  header "unistd.h"
  header "utime.h"
  header "wait.h"
% if CMAKE_SDK not in ["ANDROID"]:
  header "ulimit.h"
  header "utmpx.h"
  header "wordexp.h"
% end

  // <assert.h>'s use of NDEBUG requires textual inclusion. 
  textual header "assert.h"

  export *
}

% if CMAKE_SDK != "WASI" and CMAKE_SDK != "ANDROID":
module CUUID [system] {
  header "uuid/uuid.h"
  link "uuid"
  export *
}
% end
