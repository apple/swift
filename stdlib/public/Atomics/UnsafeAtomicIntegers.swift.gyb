//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  def atomicTypes():
    return [
      # Swift    Builtin  Getter
      ("Int",    "Word",  "_builtinWordValue"),
      ("UInt",   "Word",  "_builtinWordValue"),
      ("Int64",  "Int64", "_value"),
      ("UInt64", "Int64", "_value"),
      ("Int32",  "Int32", "_value"),
      ("UInt32", "Int32", "_value"),
      ("Int16",  "Int16", "_value"),
      ("UInt16", "Int16", "_value"),
      ("Int8",   "Int8",  "_value"),
      ("UInt8",  "Int8",  "_value"),
    ]

  def rmwOrderings():
    return [
      # Swift enum case,         API name,                 documentation name,        llvm name,   failure name
      ('relaxed',                'Relaxed',                'relaxed',                 'monotonic', 'monotonic'),
      ('acquiring',              'Acquiring',              'acquiring',               'acquire',   'acquire'),
      ('releasing',              'Releasing',              'releasing',               'release',   'monotonic'),
      ('acquiringAndReleasing',  'AcquiringAndReleasing',  'acquiring-and-releasing', 'acqrel',    'acquire'),
      ('sequentiallyConsistent', 'Serialized',             'sequentially consistent', 'seqcst',    'seqcst'),
    ]

  def loadOrderings():
    return [
      # Swift enum case,         API name,     doc name,                  llvm name
      ('relaxed',                'Relaxed',    'relaxed',                 'monotonic'),
      ('acquiring',              'Acquiring',  'acquiring',               'acquire'),
      ('sequentiallyConsistent', 'Serialized', 'sequentially consistent', 'seqcst'),
    ]

  def storeOrderings():
    return [
      # Swift enum case,         API name,     doc name,                  llvm name
      ('relaxed',                'Relaxed',    'relaxed',                 'monotonic'),
      ('releasing',              'Releasing',  'releasing',               'release'),
      ('sequentiallyConsistent', 'Serialized', 'sequentially consistent', 'seqcst'),
    ]

  def caseStatementForOrdering(ordering):
    if ordering == 'sequentiallyConsistent':
      return "default"
    else:
      return "case .{}".format(ordering)

  # FIXME: Swift should provide intrinsics for arbitrary ordering pairs
  def llvmCmpXchgFailureOrder(rmw, load): # See llvm/Support/AtomicOrdering.h
    if load == "monotonic":
      return "monotonic"
    if rmw == "monotonic" or rmw == "release":
      return "monotonic"
    if rmw == "acquire" or rmw == "acqrel":
      return "acquire"
    if rmw == "seqcst":
      return load
    return "INVALID"

  def lowerFirst(str):
    return str[:1].lower() + str[1:] if str else ""

  def argLabel(label):
    return label + ": " if label <> "_" else ""

  integerOperations = [
    # Swift name,         llvm name,  operator, label, doc
    ('WrappingIncrement', 'add',      '&+',     "by",  "wrapping add"),
    ('WrappingDecrement', 'sub',      '&-',     "by",  "wrapping subtract"),
    ('BitwiseAnd',        'and',      '&',      "_",   "bitwise and"),
    ('BitwiseOr',         'or',       '|',      "_",   "bitwise or"),
    ('BitwiseXor',        'xor',      '^',      "_",   "bitwise xor")
  ]

  def argLabel(label):
    return label + ": " if label <> "_" else ""
}%

import Swift

% for (swiftType, builtinType, getter) in atomicTypes():
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
@frozen
public struct UnsafeAtomic${swiftType} {
  public typealias Value = ${swiftType}

  @usableFromInline
  internal let _ptr: UnsafeMutableRawPointer

  @_transparent // Debug performance
  public init(at address: UnsafeMutablePointer<Value>) {
    self._ptr = UnsafeMutableRawPointer(address)
  }

  public var address: UnsafeMutablePointer<Value> {
    _ptr.assumingMemoryBound(to: Value.self)
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomic${swiftType} {
  public static func create(initialValue: Value) -> Self {
    let ptr = UnsafeMutablePointer<Value>.allocate(capacity: 1)
    ptr.initialize(to: initialValue)
    return Self(at: ptr)
  }

  public func destroy() {
    address.deallocate()
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomic${swiftType} {
  /// Atomically loads and returns the current value,
  /// with the specified memory ordering.
  @_semantics("has_constant_evaluable_arguments")
  @_transparent @_alwaysEmitIntoClient
  public func load(ordering: AtomicLoadOrdering) -> Value {
    switch ordering {
%   for (swiftOrder, _, _, llvmOrder) in loadOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      return Value(Builtin.atomicload_${llvmOrder}_${builtinType}(
          _ptr._rawValue))
%   end
    }
  }

  /// Atomically sets the current value to `desired`,
  /// with the specified memory ordering.
  @_semantics("has_constant_evaluable_arguments")
  @_transparent @_alwaysEmitIntoClient
  public func store(
    _ desired: Value,
    ordering: AtomicStoreOrdering
  ) {
    switch ordering {
%   for (swiftOrder, _, _, llvmOrder) in storeOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      Builtin.atomicstore_${llvmOrder}_${builtinType}(
        _ptr._rawValue,
        desired.${getter})
%   end
    }
  }

  /// Atomically sets the current value to `desired` and returns the previous
  /// value, with the specified memory ordering.
  ///
  /// - Returns: The original value.
  @_semantics("has_constant_evaluable_arguments")
  @_transparent @_alwaysEmitIntoClient
  public func exchange(
    _ desired: Value,
    ordering: AtomicUpdateOrdering
  ) -> Value {
    switch ordering {
%   for (swiftOrder, _, _, llvmOrder, _) in rmwOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      return Value(Builtin.atomicrmw_xchg_${llvmOrder}_${builtinType}(
          _ptr._rawValue, desired.${getter}))
%   end
    }
  }

  /// Perform an atomic compare and exchange operation with
  /// the specified memory ordering.
  ///
  /// This operation is equivalent to the following pseudocode:
  ///
  /// ```
  /// atomic(self, ordering: ordering) { value in
  ///   guard value == expected else { return (false, value) }
  ///   value = desired
  ///   return (true, expected)
  /// }
  /// ```
  ///
  /// This method implements a "strong" compare and exchange operation
  /// that does not permit spurious failures.
  @_semantics("has_constant_evaluable_arguments")
  @_transparent @_alwaysEmitIntoClient
  public func compareExchange(
    expected: Value,
    desired: Value,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: Value) {
    switch ordering {
%   for (swiftOrder, _, _, llvmOrder, failureOrder) in rmwOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      let (oldValue, won) = Builtin.cmpxchg_${llvmOrder}_${failureOrder}_${builtinType}(
        _ptr._rawValue, expected.${getter}, desired.${getter})
      return (Bool(_builtinBooleanLiteral: won), Value(oldValue))
%   end
    }
  }

  /// Perform an atomic compare and exchange operation with the specified
  /// success/failure memory orderings.
  ///
  /// This operation is equivalent to the following pseudocode:
  ///
  /// ```
  /// atomic(self) { currentValue in
  ///   let original = currentValue
  ///   guard original == expected else { return (false, original) }
  ///   currentValue = desired
  ///   return (true, original)
  /// }
  /// ```
  ///
  /// The `ordering` argument specifies the memory ordering to use when the
  /// operation manages to update the current value, while `failureOrdering`
  /// will be used when the operation leaves the value intact.
  ///
  /// The `failureOrdering` argument currently isn't allowed to introduce a
  /// synchronization constraint that isn't also guaranteed by `ordering`.
  /// (This limitation may be lifted in the future.) For example:
  ///
  /// ```
  /// // OK
  /// ptr._atomicCompareExchangeWord(
  ///   expected: 1, desired: 2,
  ///   ordering: .acquiringAndReleasing, failureOrdering: .relaxed)
  ///
  /// // Not supported:
  /// ptr._atomicCompareExchangeWord(
  ///   expected: 3, desired: 0,
  ///   ordering: .releasing, failureOrdering: .acquiring)
  /// ```
  @_semantics("has_constant_evaluable_arguments")
  @_transparent @_alwaysEmitIntoClient
  public func compareExchange(
    expected: Value,
    desired: Value,
    ordering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Value) {
    switch (ordering, failureOrdering) {
% for (swiftSuccess, _, _, llvmSuccess, _) in rmwOrderings():
%   for (swiftFailure, _, _, llvmFailure) in loadOrderings():
    case (.${swiftSuccess}, .${swiftFailure}):
      let (oldValue, won) = Builtin.cmpxchg_${llvmSuccess}_${llvmCmpXchgFailureOrder(llvmSuccess, llvmFailure)}_${builtinType}(
        _ptr._rawValue, expected.${getter}, desired.${getter})
      return (Bool(_builtinBooleanLiteral: won), Value(oldValue))
%   end
% end
    default:
      let (oldValue, won) = Builtin.cmpxchg_seqcst_seqcst_${builtinType}(
        _ptr._rawValue, expected.${getter}, desired.${getter})
      return (Bool(_builtinBooleanLiteral: won), Value(oldValue))
    }
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomic${swiftType} {
  % for (name, llvmop, op, label, doc) in integerOperations:
  % defaultValue = " = 1" if label <> "" else ""
  /// Perform an atomic ${doc} operation and return the original value, with
  /// the specified memory ordering.
  ///
  % if "Wrapping" in name:
  /// Note: This operation silently wraps around on overflow, like the
  /// `${op}` operator does on `Int` values.
  ///
  % end
  /// - Returns: The original value before the operation.
  @_semantics("has_constant_evaluable_arguments")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public func loadThen${name}(
    ${label} operand: Value${defaultValue},
    ordering: AtomicUpdateOrdering
  ) -> Value {
    switch ordering {
    % for (swiftOrder, _, _, llvmOrder, failureOrder) in rmwOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      return Value(Builtin.atomicrmw_${llvmop}_${llvmOrder}_${builtinType}(
        _ptr._rawValue, operand.${getter}))
    % end
    }
  }

  /// Perform an atomic ${doc} operation and return the new value, with
  /// the specified memory ordering.
  ///
  % if "Wrapping" in name:
  /// Note: This operation silently wraps around on overflow, like the
  /// `${op}` operator does on `Int` values.
  ///
  % end
  /// - Returns: The new value after the operation.
  @_semantics("has_constant_evaluable_arguments")
  @_transparent @_alwaysEmitIntoClient
  public func ${lowerFirst(name)}ThenLoad(
    ${label} operand: Value${defaultValue},
    ordering: AtomicUpdateOrdering
  ) -> Value {
    loadThen${name}(${argLabel(label)}operand, ordering: ordering) ${op} operand
  }
  % end
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension UnsafeAtomic${swiftType} {
  /// Perform an atomic wrapping increment operation with the specified memory
  /// ordering.
  ///
  /// Note: This operation silently wraps around on overflow, like the
  /// `&+=` operator does on `Int` values.
  @_semantics("has_constant_evaluable_arguments")
  @_transparent @_alwaysEmitIntoClient
  public func wrappingIncrement(
    by operand: Value = 1,
    ordering: AtomicUpdateOrdering
  ) {
    _ = loadThenWrappingIncrement(by: operand, ordering: ordering)
  }

  /// Perform an atomic wrapping decrement operation with the specified memory
  /// ordering.
  ///
  /// Note: This operation silently wraps around on overflow, like the
  /// `&-=` operator does on `Int` values.
  @_semantics("has_constant_evaluable_arguments")
  @_transparent @_alwaysEmitIntoClient
  public func wrappingDecrement(
    by operand: Value = 1,
    ordering: AtomicUpdateOrdering
  ) {
    _ = loadThenWrappingDecrement(by: operand, ordering: ordering)
  }
}
% end
