//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  atomicTypes = [
    "UnsafeRawPointer",
    "UnsafeMutableRawPointer",
    "UnsafePointer",
    "UnsafeMutablePointer",
    "Unmanaged",
  ]

  def rmwOrderings():
    return [
      # Swift enum case,         llvm name,   failure name
      ('relaxed',                'monotonic', 'monotonic'),
      ('acquiring',              'acquire',   'acquire'),
      ('releasing',              'release',   'monotonic'),
      ('acquiringAndReleasing',  'acqrel',    'acquire'),
      ('sequentiallyConsistent', 'seqcst',    'seqcst'),
    ]

  def loadOrderings():
    return [
      # Swift enum case,         llvm name
      ('relaxed',                'monotonic'),
      ('acquiring',              'acquire'),
      ('sequentiallyConsistent', 'seqcst'),
    ]

  def storeOrderings():
    return [
      # Swift enum case,         llvm name
      ('relaxed',                'monotonic'),
      ('releasing',              'release'),
      ('sequentiallyConsistent', 'seqcst'),
    ]

  def caseStatementForOrdering(ordering):
      return "case .{}".format(ordering)

  # FIXME: Swift should provide intrinsics for arbitrary ordering pairs
  def llvmOrders(rmw, load): # See llvm/Support/AtomicOrdering.h
    def max(rmw, load):
      if load == "acquire":
        if rmw == "monotonic":
          return "acquire"
        if rmw == "release":
          return "acqrel"
      if load == "seqcst":
        return "seqcst"
      return rmw
    return max(rmw, load) + "_" + load
}%

import Swift


% for swiftType in atomicTypes:
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension ${swiftType} {
  @frozen
  public struct _AtomicStorage {
    @usableFromInline
    internal let _word: Builtin.Word

    @_transparent @_alwaysEmitIntoClient
    internal init(_word: Builtin.Word) {
      self._word = _word
    }
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension ${swiftType}: AtomicProtocol {
  @inlinable @inline(__always)
  public static func _prepareAtomicStorage(for value: Self) -> _AtomicStorage {
    return _encodeAtomicStorage(for: value)
  }

  @inlinable @inline(__always)
  public static func _disposeAtomicStorage(
    _ storage: inout _AtomicStorage
  ) -> Self {
    return _decodeAtomicStorage(storage)
  }

  @inlinable @inline(__always)
  public static func _encodeAtomicStorage(for value: Self) -> _AtomicStorage {
    % if swiftType == "Unmanaged":
    return _AtomicStorage(
      _word: Int(bitPattern: value.toOpaque())._builtinWordValue)
    % else:
    return _AtomicStorage(_word: Int(bitPattern: value)._builtinWordValue)
    % end
  }

  @inlinable @inline(__always)
  public static func _decodeAtomicStorage(_ storage: _AtomicStorage) -> Self {
    % if swiftType == "Unmanaged":
    let raw = UnsafeRawPointer(bitPattern: Int(storage._word))
    return Unmanaged.fromOpaque(raw!)
    % else:
    return ${swiftType}(bitPattern: Int(storage._word))!
    % end
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension ${swiftType}._AtomicStorage: _PrimitiveAtomicOptional {
  @_transparent @_alwaysEmitIntoClient
  public var _isNil: Bool { Int(_word) == 0 }

  @_transparent @_alwaysEmitIntoClient
  public static var _nilValue: Self { Self(_word: 0._builtinWordValue) }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func _atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Self {
    let word: Builtin.Word
    switch ordering {
%   for (swiftOrder, llvmOrder) in loadOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      word = Builtin.atomicload_${llvmOrder}_Word(pointer._rawValue)
%   end
    default:
      Builtin.unreachable()
    }
    return Self(_word: word)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func _atomicStore(
    _ desired: Self,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    switch ordering {
%   for (swiftOrder, llvmOrder) in storeOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      Builtin.atomicstore_${llvmOrder}_Word(
        pointer._rawValue,
        desired._word)
%   end
    default:
      Builtin.unreachable()
    }
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func _atomicExchange(
    _ desired: Self,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Self {
    let word: Builtin.Word
    switch ordering {
%   for (swiftOrder, llvmOrder, _) in rmwOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      word = Builtin.atomicrmw_xchg_${llvmOrder}_Word(
        pointer._rawValue,
        desired._word)
%   end
    default:
      Builtin.unreachable()
    }
    return Self(_word: word)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func _atomicCompareExchange(
    expected: Self,
    desired: Self,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: Self) {
    let old: Builtin.Word
    let won: Builtin.Int1
    switch ordering {
%   for (swiftOrder, llvmOrder, failureOrder) in rmwOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      (old, won) = Builtin.cmpxchg_${llvmOrder}_${failureOrder}_Word(
        pointer._rawValue,
        expected._word,
        desired._word)
%   end
    default:
      Builtin.unreachable()
    }
    return (
      Bool(_builtinBooleanLiteral: won),
      Self(_word: old))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func _atomicCompareExchange(
    expected: Self,
    desired: Self,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Self) {
    let old: Builtin.Word
    let won: Builtin.Int1
    switch (ordering, failureOrdering) {
% for (swiftSuccess, llvmSuccess, _) in rmwOrderings():
%   for (swiftFailure, llvmFailure) in loadOrderings():
    case (.${swiftSuccess}, .${swiftFailure}):
      (old, won) = Builtin.cmpxchg_${llvmOrders(llvmSuccess, llvmFailure)}_Word(
        pointer._rawValue,
        expected._word,
        desired._word)
%   end
% end
    default:
      Builtin.unreachable()
    }
    return (
      Bool(_builtinBooleanLiteral: won),
      Self(_word: old))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func _atomicWeakCompareExchange(
    expected: Self,
    desired: Self,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Self) {
    let old: Builtin.Word
    let won: Builtin.Int1
    switch (ordering, failureOrdering) {
% for (swiftSuccess, llvmSuccess, _) in rmwOrderings():
%   for (swiftFailure, llvmFailure) in loadOrderings():
    case (.${swiftSuccess}, .${swiftFailure}):
      (old, won) = Builtin.cmpxchg_${llvmOrders(llvmSuccess, llvmFailure)}_weak_Word(
        pointer._rawValue,
        expected._word,
        desired._word)
%   end
% end
    default:
      Builtin.unreachable()
    }
    return (
      Bool(_builtinBooleanLiteral: won),
      Self(_word: old))
  }
}
% end
