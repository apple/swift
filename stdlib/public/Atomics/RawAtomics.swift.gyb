//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  def rmwOrderings():
    return [
      # Swift enum case,         API name,                 documentation name,        llvm name,   failure name
      ('relaxed',                'Relaxed',                'relaxed',                 'monotonic', 'monotonic'),
      ('acquiring',              'Acquiring',              'acquiring',               'acquire',   'acquire'),
      ('releasing',              'Releasing',              'releasing',               'release',   'monotonic'),
      ('acquiringAndReleasing',  'AcquiringAndReleasing',  'acquiring-and-releasing', 'acqrel',    'acquire'),
      ('sequentiallyConsistent', 'Serialized',             'sequentially consistent', 'seqcst',    'seqcst'),
    ]

  def loadOrderings():
    return [
      # Swift enum case,         API name,     doc name,                  llvm name
      ('relaxed',                'Relaxed',    'relaxed',                 'monotonic'),
      ('acquiring',              'Acquiring',  'acquiring',               'acquire'),
      ('sequentiallyConsistent', 'Serialized', 'sequentially consistent', 'seqcst'),
    ]

  def storeOrderings():
    return [
      # Swift enum case,         API name,     doc name,                  llvm name
      ('relaxed',                'Relaxed',    'relaxed',                 'monotonic'),
      ('releasing',              'Releasing',  'releasing',               'release'),
      ('sequentiallyConsistent', 'Serialized', 'sequentially consistent', 'seqcst'),
    ]

  def isStrongerThan(rmw, load): # See llvm/Support/AtomicOrdering.h
    if rmw == "sequentiallyConsistent":
      return load == "relaxed" or load == "acquiring"
    if rmw == "acquiringAndReleasing":
      return load == "relaxed"
    if rmw == "releasing":
      return False
    if rmw == "acquiring":
      return load == "relaxed"
    if rmw == "relaxed":
      return False

  integerOperations = [
    # Swift name,         llvm name,  operator, label, doc
    ('WrappingIncrement', 'add',      '&+',     "by",  "wrapping add"),
    ('WrappingDecrement', 'sub',      '&-',     "by",  "wrapping subtract"),
    ('BitwiseAnd',        'and',      '&',      "_",   "bitwise and"),
    ('BitwiseOr',         'or',       '|',      "_",   "bitwise or"),
    ('BitwiseXor',        'xor',      '^',      "_",   "bitwise xor")
  ]

  def argLabel(label):
    return label + ": " if label <> "_" else ""
}%

import Swift

% for (enumOrder, apiOrder, docOrder, llvmOrder, _) in rmwOrderings():
%   if enumOrder <> "relaxed":
@_alwaysEmitIntoClient
@_transparent
public
func _atomic${apiOrder}MemoryFence() {
  Builtin.fence_${llvmOrder}()
}
%   end
% end

extension UnsafeMutableRawPointer {
% for (enumOrder, apiOrder, docOrder, llvmOrder) in loadOrderings():
  /// Atomically loads a word starting at this address with ${docOrder}
  /// memory ordering.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @_alwaysEmitIntoClient
  @_transparent
  public
  func _atomic${apiOrder}LoadWord() -> UInt {
    return UInt(Builtin.atomicload_${llvmOrder}_Word(_rawValue))
  }
% end
}

extension UnsafeMutableRawPointer {
  /// Atomically loads a word starting at this address with the specified
  /// memory ordering.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
  @_semantics("atomics.constant_ordering")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  @usableFromInline
  internal
  func _atomicLoadWord(ordering: AtomicLoadOrdering) -> UInt {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedLoadWord()
    case .acquiring:
      return _atomicAcquiringLoadWord()
    default:
      return _atomicSerializedLoadWord()
    }
  }
}

//------------------------------------------------------------------------------

extension UnsafeMutableRawPointer {
% for enumOrder, apiOrder, docOrder, llvmOrder in storeOrderings():
  /// Atomically stores the specified value starting at the memory referenced by
  /// this pointer, with ${docOrder} memory ordering.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @_alwaysEmitIntoClient
  @_transparent
  public
  func _atomic${apiOrder}StoreWord(_ desired: UInt) {
    Builtin.atomicstore_${llvmOrder}_Word(_rawValue, desired._builtinWordValue)
  }
% end
}

extension UnsafeMutableRawPointer {
  /// Atomically stores the specified value starting at the memory referenced by
  /// this pointer, with the specified memory ordering.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
  @_semantics("atomics.constant_ordering")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  @usableFromInline
  internal
  func _atomicStoreWord(
    _ desired: UInt,
    ordering: AtomicStoreOrdering
  ) {
    switch ordering {
    case .relaxed:
      _atomicRelaxedStoreWord(desired)
    case .releasing:
      _atomicReleasingStoreWord(desired)
    default:
      _atomicSerializedStoreWord(desired)
    }
  }
}

//------------------------------------------------------------------------------

extension UnsafeMutableRawPointer {
% for _, apiOrder, docOrder, llvmOrder, _ in rmwOrderings():
  /// Atomically stores the specified value at the memory referenced by this
  /// pointer, returning the previous value, with ${docOrder} memory ordering.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  ///
  /// - Returns: The original value.
  @_alwaysEmitIntoClient
  @_transparent
  public
  func _atomic${apiOrder}ExchangeWord(
    _ desired: UInt
  ) -> UInt {
    let oldValue = Builtin.atomicrmw_xchg_${llvmOrder}_Word(
      _rawValue, desired._builtinWordValue)
    return UInt(oldValue)
  }
% end
}

extension UnsafeMutableRawPointer {
  /// Atomically stores the specified value starting at the memory referenced by
  /// this pointer, with the specified memory ordering.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
  @_semantics("atomics.constant_ordering")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  public
  func _atomicExchangeWord(
    _ desired: UInt,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedExchangeWord(desired)
    case .acquiring:
      return _atomicAcquiringExchangeWord(desired)
    case .releasing:
      return _atomicReleasingExchangeWord(desired)
    case .acquiringAndReleasing:
      return _atomicAcquiringAndReleasingExchangeWord(desired)
    default:
      return _atomicSerializedExchangeWord(desired)
    }
  }
}

//------------------------------------------------------------------------------

extension UnsafeMutableRawPointer {
% for swiftOrder, apiOrder, docOrder, llvmOrder, failureOrder in rmwOrderings():
  /// Perform an atomic compare and exchange operation with
  /// ${docOrder} memory ordering.
  ///
  /// This operation is equivalent to the following pseudocode:
  ///
  /// ```
  /// atomic(self, ordering: .${swiftOrder}) { currentValue in
  ///   let original = currentValue
  ///   if original == expected {
  ///      currentValue = desired
  ///      return (true, original)
  ///   } else {
  ///      return (false, original)
  ///   }
  /// }
  /// ```
  ///
  /// This method implements a "strong" compare and exchange operation
  /// that does not permit spurious failures.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @_alwaysEmitIntoClient
  @_transparent
  public
  func _atomic${apiOrder}CompareExchangeWord(
    expected: UInt,
    desired: UInt
  ) -> (exchanged: Bool, original: UInt) {
    let (oldValue, won) = Builtin.cmpxchg_${llvmOrder}_${failureOrder}_Word(
      _rawValue, expected._builtinWordValue, desired._builtinWordValue)
    return (Bool(_builtinBooleanLiteral: won), UInt(oldValue))
  }
% end
}

extension UnsafeMutableRawPointer {
  /// Perform an atomic compare and exchange operation with the specified memory
  /// ordering.
  ///
  /// This operation is equivalent to the following pseudocode:
  ///
  /// ```
  /// atomic(self, ordering) { currentValue in
  ///   let original = currentValue
  ///   guard original == expected else { return (false, original) }
  ///   currentValue = desired
  ///   return (true, original)
  /// }
  /// ```
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
  @_semantics("atomics.constant_ordering")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  public
  func _atomicCompareExchangeWord(
    expected: UInt,
    desired: UInt,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: UInt) {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedCompareExchangeWord(
        expected: expected,
        desired: desired)
    case .acquiring:
      return _atomicAcquiringCompareExchangeWord(
        expected: expected,
        desired: desired)
    case .releasing:
      return _atomicReleasingCompareExchangeWord(
        expected: expected,
        desired: desired)
    case .acquiringAndReleasing:
      return _atomicAcquiringAndReleasingCompareExchangeWord(
        expected: expected,
        desired: desired)
    default:
      return _atomicSerializedCompareExchangeWord(
        expected: expected,
        desired: desired)
    }
  }
}

//------------------------------------------------------------------------------

extension UnsafeMutableRawPointer {
% for swiftOrder, apiOrder, docOrder, llvmOrder, _ in rmwOrderings():
%   for swiftFailOrder, apiFailOrder, docFailOrder, llvmFailOrder in loadOrderings():
%      if isStrongerThan(swiftOrder, swiftFailOrder):
  /// Perform an atomic compare and exchange operation with
  /// ${docOrder} memory ordering on success
  /// and $(docFailOrder} ordering on failure.
  ///
  /// This operation is equivalent to the following pseudocode:
  ///
  /// ```
  /// atomic(self, ordering: .${swiftOrder}) { currentValue in
  ///   let original = currentValue
  ///   if original == expected {
  ///      currentValue = desired
  ///      return (true, original)
  ///   } else {
  ///      return (false, original)
  ///   }
  /// }
  /// ```
  ///
  /// This method implements a "strong" compare and exchange operation
  /// that does not permit spurious failures.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @_alwaysEmitIntoClient
  @_transparent
  public
  func _atomic${apiOrder}Or${apiFailOrder}CompareExchangeWord(
    expected: UInt,
    desired: UInt
  ) -> (exchanged: Bool, original: UInt) {
    let (oldValue, won) = Builtin.cmpxchg_${llvmOrder}_${llvmFailOrder}_Word(
      _rawValue, expected._builtinWordValue, desired._builtinWordValue)
    return (Bool(_builtinBooleanLiteral: won), UInt(oldValue))
  }
%     end
%   end
% end
}

extension UnsafeMutableRawPointer {
  /// Perform an atomic compare and exchange operation with the specified
  /// success/failure memory orderings.
  ///
  /// This operation is equivalent to the following pseudocode:
  ///
  /// ```
  /// atomic(self, ordering, failureOrdering) { currentValue in
  ///   let original = currentValue
  ///   guard original == expected else { return (false, original) }
  ///   currentValue = desired
  ///   return (true, original)
  /// }
  /// ```
  ///
  /// The `ordering` argument specifies the memory ordering to use when the
  /// operation manages to update the current value, while `failureOrdering`
  /// will be used when the operation leaves the value intact.
  ///
  /// The `failureOrdering` argument currently isn't allowed to introduce a
  /// synchronization constraint that isn't also guaranteed by `ordering`.
  /// (This limitation may be lifted in the future.) For example:
  ///
  /// ```
  /// // OK
  /// ptr._atomicCompareExchangeWord(
  ///   expected: 1, desired: 2,
  ///   ordering: .acquiringAndReleasing, failureOrdering: .relaxed)
  ///
  /// // Not supported:
  /// ptr._atomicCompareExchangeWord(
  ///   expected: 3, desired: 0,
  ///   ordering: .releasing, failureOrdering: .acquiring)
  /// ```
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
  @_semantics("atomics.constant_ordering")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  public
  func _atomicCompareExchangeWord(
    expected: UInt,
    desired: UInt,
    ordering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: UInt) {
    switch (ordering, failureOrdering) {
    case (.relaxed, .relaxed):
      return _atomicRelaxedCompareExchangeWord(
        expected: expected,
        desired: desired)
    case (.acquiring, .relaxed):
      return _atomicAcquiringOrRelaxedCompareExchangeWord(
        expected: expected,
        desired: desired)
    case (.acquiring, .acquiring):
      return _atomicAcquiringCompareExchangeWord(
        expected: expected,
        desired: desired)
    case (.releasing, .relaxed):
      return _atomicReleasingCompareExchangeWord(
        expected: expected,
        desired: desired)
    case (.acquiringAndReleasing, .relaxed):
      return _atomicAcquiringAndReleasingOrRelaxedCompareExchangeWord(
        expected: expected,
        desired: desired)
    case (.acquiringAndReleasing, .acquiring):
      return _atomicAcquiringAndReleasingCompareExchangeWord(
        expected: expected,
        desired: desired)
    case (.sequentiallyConsistent, .relaxed):
      return _atomicSerializedOrRelaxedCompareExchangeWord(
        expected: expected,
        desired: desired)
    case (.sequentiallyConsistent, .acquiring):
      return _atomicSerializedOrAcquiringCompareExchangeWord(
        expected: expected,
        desired: desired)
    case (.sequentiallyConsistent, .sequentiallyConsistent):
      return _atomicSerializedCompareExchangeWord(
        expected: expected,
        desired: desired)
    default:
      preconditionFailure("Unsupported orderings")
    }
  }
}

//------------------------------------------------------------------------------

extension UnsafeMutableRawPointer {
% for (swiftName, builtinName, operator, label, doc) in integerOperations:
%   for _, apiOrder, docOrder, llvmOrder, _ in rmwOrderings():
  /// Perform an atomic ${doc} operation and return the new value,
  /// with ${docOrder} memory ordering.
  ///
  % if "Wrapping" in swiftName:
  /// - Note: This operation silently wraps around on overflow, like the
  /// `${operator}` operator does on `UInt` values.
  ///
  % end
  /// - Returns: The original value before the operation.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @_alwaysEmitIntoClient
  @_transparent
  public
  func _atomic${apiOrder}LoadThen${swiftName}Word(
    ${label} operand: UInt
  ) -> UInt {
    let value = Builtin.atomicrmw_${builtinName}_${llvmOrder}_Word(
      _rawValue, operand._builtinWordValue)
    return UInt(value)
  }
%   end
% end
}

extension UnsafeMutableRawPointer {
% for (swiftName, builtinName, operator, label, doc) in integerOperations:
  /// Perform an atomic ${doc} operation and return the new value,
  /// with the specified memory ordering.
  ///
  % if "Wrapping" in swiftName:
  /// - Note: This operation silently wraps around on overflow, like the
  /// `${operator}` operator does on `UInt` values.
  ///
  % end
  /// - Returns: The original value before the operation.
  ///
  /// - Warning: It is the responsibility of the caller to guarantee that `self`
  ///   is correctly aligned for atomic access of an UInt value.
  @available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
  @_semantics("atomics.constant_ordering")
  @_alwaysEmitIntoClient
  @_transparent // Debug performance
  @usableFromInline
  internal
  func _atomicLoadThen${swiftName}Word(
    ${label} operand: UInt,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    switch ordering {
    case .relaxed:
      return _atomicRelaxedLoadThen${swiftName}Word(${argLabel(label)}operand)
    case .acquiring:
      return _atomicAcquiringLoadThen${swiftName}Word(${argLabel(label)}operand)
    case .releasing:
      return _atomicReleasingLoadThen${swiftName}Word(${argLabel(label)}operand)
    case .acquiringAndReleasing:
      return _atomicAcquiringAndReleasingLoadThen${swiftName}Word(${argLabel(label)}operand)
    default:
      return _atomicSerializedLoadThen${swiftName}Word(${argLabel(label)}operand)
    }
  }
% end
}
