//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
  def atomicTypes():
    return [
      # Swift    Builtin  Getter
      ("Int",    "Word",  "_builtinWordValue"),
      ("UInt",   "Word",  "_builtinWordValue"),
      ("Int64",  "Int64", "_value"),
      ("UInt64", "Int64", "_value"),
      ("Int32",  "Int32", "_value"),
      ("UInt32", "Int32", "_value"),
      ("Int16",  "Int16", "_value"),
      ("UInt16", "Int16", "_value"),
      ("Int8",   "Int8",  "_value"),
      ("UInt8",  "Int8",  "_value"),
    ]

  def rmwOrderings():
    return [
      # Swift enum case,         llvm name,   failure name
      ('relaxed',                'monotonic', 'monotonic'),
      ('acquiring',              'acquire',   'acquire'),
      ('releasing',              'release',   'monotonic'),
      ('acquiringAndReleasing',  'acqrel',    'acquire'),
      ('sequentiallyConsistent', 'seqcst',    'seqcst'),
    ]

  def loadOrderings():
    return [
      # Swift enum case,         llvm name
      ('relaxed',                'monotonic'),
      ('acquiring',              'acquire'),
      ('sequentiallyConsistent', 'seqcst'),
    ]

  def storeOrderings():
    return [
      # Swift enum case,         llvm name
      ('relaxed',                'monotonic'),
      ('releasing',              'release'),
      ('sequentiallyConsistent', 'seqcst'),
    ]

  def caseStatementForOrdering(ordering):
      return "case .{}".format(ordering)

  # FIXME: Swift should provide intrinsics for arbitrary ordering pairs
  def llvmOrders(rmw, load): # See llvm/Support/AtomicOrdering.h
    def max(rmw, load):
      if load == "acquire":
        if rmw == "monotonic":
          return "acquire"
        if rmw == "release":
          return "acqrel"
      if load == "seqcst":
        return "seqcst"
      return rmw
    return max(rmw, load) + "_" + load

  def lowerFirst(str):
    return str[:1].lower() + str[1:] if str else ""

  def argLabel(label):
    return label + ": " if label <> "_" else ""

  integerOperations = [
    # Swift name,         llvm name,  operator, label,  doc
    ('WrappingIncrement', 'add',      '&+',     "by",   "wrapping add"),
    ('WrappingDecrement', 'sub',      '&-',     "by",   "wrapping subtract"),
    ('BitwiseAnd',        'and',      '&',      "with", "bitwise and"),
    ('BitwiseOr',         'or',       '|',      "with", "bitwise or"),
    ('BitwiseXor',        'xor',      '^',      "with", "bitwise xor")
  ]
}%

import Swift

% for (swiftType, builtinType, getter) in atomicTypes():
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension ${swiftType}: AtomicProtocol {
  public typealias AtomicStorage = ${swiftType}

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<${swiftType}>,
    ordering: AtomicLoadOrdering
  ) -> ${swiftType} {
    switch ordering {
%   for (swiftOrder, llvmOrder) in loadOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      return ${swiftType}(Builtin.atomicload_${llvmOrder}_${builtinType}(
          pointer._rawValue))
%   end
    default:
      Builtin.unreachable()
    }
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: ${swiftType},
    at pointer: UnsafeMutablePointer<${swiftType}>,
    ordering: AtomicStoreOrdering
  ) {
    switch ordering {
%   for (swiftOrder, llvmOrder) in storeOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      Builtin.atomicstore_${llvmOrder}_${builtinType}(
        pointer._rawValue,
        desired.${getter})
%   end
    default:
      Builtin.unreachable()
    }
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: ${swiftType},
    at pointer: UnsafeMutablePointer<${swiftType}>,
    ordering: AtomicUpdateOrdering
  ) -> ${swiftType} {
    switch ordering {
%   for (swiftOrder, llvmOrder, _) in rmwOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      return ${swiftType}(Builtin.atomicrmw_xchg_${llvmOrder}_${builtinType}(
          pointer._rawValue, desired.${getter}))
%   end
    default:
      Builtin.unreachable()
    }
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: ${swiftType},
    desired: ${swiftType},
    at pointer: UnsafeMutablePointer<${swiftType}>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: ${swiftType}) {
    switch ordering {
%   for (swiftOrder, llvmOrder, failureOrder) in rmwOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      let (oldValue, won) = Builtin.cmpxchg_${llvmOrder}_${failureOrder}_${builtinType}(
        pointer._rawValue, expected.${getter}, desired.${getter})
      return (Bool(_builtinBooleanLiteral: won), ${swiftType}(oldValue))
%   end
    default:
      Builtin.unreachable()
    }
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: ${swiftType},
    desired: ${swiftType},
    at pointer: UnsafeMutablePointer<${swiftType}>,
    ordering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: ${swiftType}) {
    switch (ordering, failureOrdering) {
% for (swiftSuccess, llvmSuccess, _) in rmwOrderings():
%   for (swiftFailure, llvmFailure) in loadOrderings():
    case (.${swiftSuccess}, .${swiftFailure}):
      let (oldValue, won) = Builtin.cmpxchg_${llvmOrders(llvmSuccess, llvmFailure)}_${builtinType}(
        pointer._rawValue, expected.${getter}, desired.${getter})
      return (Bool(_builtinBooleanLiteral: won), ${swiftType}(oldValue))
%   end
% end
    default:
      Builtin.unreachable()
    }
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: ${swiftType},
    desired: ${swiftType},
    at pointer: UnsafeMutablePointer<${swiftType}>,
    ordering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: ${swiftType}) {
    switch (ordering, failureOrdering) {
% for (swiftSuccess, llvmSuccess, _) in rmwOrderings():
%   for (swiftFailure, llvmFailure) in loadOrderings():
    case (.${swiftSuccess}, .${swiftFailure}):
      let (oldValue, won) = Builtin.cmpxchg_${llvmOrders(llvmSuccess, llvmFailure)}_weak_${builtinType}(
        pointer._rawValue, expected.${getter}, desired.${getter})
      return (Bool(_builtinBooleanLiteral: won), ${swiftType}(oldValue))
%   end
% end
    default:
      Builtin.unreachable()
    }
  }
}

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension ${swiftType}: AtomicInteger {
  % for (name, llvmop, op, label, doc) in integerOperations:
  % defaultValue = " = 1" if label <> "" else ""
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThen${name}(
    ${label} operand: Self${defaultValue},
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Self {
    switch ordering {
    % for (swiftOrder, llvmOrder, _) in rmwOrderings():
    ${caseStatementForOrdering(swiftOrder)}:
      return Self(Builtin.atomicrmw_${llvmop}_${llvmOrder}_${builtinType}(
        pointer._rawValue, operand.${getter}))
    % end
    default:
      Builtin.unreachable()
    }
  }
  % end
}
