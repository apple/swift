from Node import error


SYNTAX_NODE_SERIALIZATION_CODES = {
    # 0 is 'Token'. Needs to be defined manually
    # 1 is 'Unknown'. Needs to be defined manually
    'UnknownDecl': 2,
    'TypealiasDecl': 3,
    'AssociatedtypeDecl': 4,
    'IfConfigDecl': 5,
    'PoundErrorDecl': 6,
    'PoundWarningDecl': 7,
    'PoundSourceLocation': 8,
    'ClassDecl': 9,
    'StructDecl': 10,
    'ProtocolDecl': 11,
    'ExtensionDecl': 12,
    'FunctionDecl': 13,
    'InitializerDecl': 14,
    'DeinitializerDecl': 15,
    'SubscriptDecl': 16,
    'CallDecl': 17,
    'ImportDecl': 18,
    'AccessorDecl': 19,
    'VariableDecl': 20,
    'EnumCaseDecl': 21,
    'EnumDecl': 22,
    'OperatorDecl': 23,
    'PrecedenceGroupDecl': 24,
    'UnknownExpr': 25,
    'InOutExpr': 26,
    'PoundColumnExpr': 27,
    'TryExpr': 28,
    'IdentifierExpr': 29,
    'SuperRefExpr': 30,
    'NilLiteralExpr': 31,
    'DiscardAssignmentExpr': 32,
    'AssignmentExpr': 33,
    'SequenceExpr': 34,
    'PoundLineExpr': 35,
    'PoundFileExpr': 36,
    'PoundFunctionExpr': 37,
    'PoundDsohandleExpr': 38,
    'SymbolicReferenceExpr': 39,
    'PrefixOperatorExpr': 40,
    'BinaryOperatorExpr': 41,
    'ArrowExpr': 42,
    'FloatLiteralExpr': 43,
    'TupleExpr': 44,
    'ArrayExpr': 45,
    'DictionaryExpr': 46,
    'ImplicitMemberExpr': 47,
    'IntegerLiteralExpr': 48,
    'StringLiteralExpr': 49,
    'BooleanLiteralExpr': 50,
    'TernaryExpr': 51,
    'MemberAccessExpr': 52,
    'DotSelfExpr': 53,
    'IsExpr': 54,
    'AsExpr': 55,
    'TypeExpr': 56,
    'ClosureExpr': 57,
    'UnresolvedPatternExpr': 58,
    'FunctionCallExpr': 59,
    'SubscriptExpr': 60,
    'OptionalChainingExpr': 61,
    'ForcedValueExpr': 62,
    'PostfixUnaryExpr': 63,
    'SpecializeExpr': 64,
    'StringInterpolationExpr': 65,
    'KeyPathExpr': 66,
    'KeyPathBaseExpr': 67,
    'ObjcKeyPathExpr': 68,
    'ObjcSelectorExpr': 69,
    'EditorPlaceholderExpr': 70,
    'ObjectLiteralExpr': 71,
    'UnknownStmt': 72,
    'ContinueStmt': 73,
    'WhileStmt': 74,
    'DeferStmt': 75,
    'ExpressionStmt': 76,
    'RepeatWhileStmt': 77,
    'GuardStmt': 78,
    'ForInStmt': 79,
    'SwitchStmt': 80,
    'DoStmt': 81,
    'ReturnStmt': 82,
    'FallthroughStmt': 83,
    'BreakStmt': 84,
    'DeclarationStmt': 85,
    'ThrowStmt': 86,
    'IfStmt': 87,
    'Decl': 88,
    'Expr': 89,
    'Stmt': 90,
    'Type': 91,
    'Pattern': 92,
    'CodeBlockItem': 93,
    'CodeBlock': 94,
    'DeclNameArgument': 95,
    'DeclNameArguments': 96,
    'FunctionCallArgument': 97,
    'TupleElement': 98,
    'ArrayElement': 99,
    'DictionaryElement': 100,
    'ClosureCaptureItem': 101,
    'ClosureCaptureSignature': 102,
    'ClosureParam': 103,
    'ClosureSignature': 104,
    'StringSegment': 105,
    'ExpressionSegment': 106,
    'ObjcNamePiece': 107,
    'TypeInitializerClause': 108,
    'ParameterClause': 109,
    'ReturnClause': 110,
    'FunctionSignature': 111,
    'IfConfigClause': 112,
    'PoundSourceLocationArgs': 113,
    'DeclModifier': 114,
    'InheritedType': 115,
    'TypeInheritanceClause': 116,
    'MemberDeclBlock': 117,
    'MemberDeclListItem': 118,
    'SourceFile': 119,
    'InitializerClause': 120,
    'FunctionParameter': 121,
    'AccessLevelModifier': 122,
    'AccessPathComponent': 123,
    'AccessorParameter': 124,
    'AccessorBlock': 125,
    'PatternBinding': 126,
    'EnumCaseElement': 127,
    'OperatorPrecedenceAndTypes': 128,
    'PrecedenceGroupRelation': 129,
    'PrecedenceGroupNameElement': 130,
    'PrecedenceGroupAssignment': 131,
    'PrecedenceGroupAssociativity': 132,
    'Attribute': 133,
    'LabeledSpecializeEntry': 134,
    'ImplementsAttributeArguments': 135,
    'ObjCSelectorPiece': 136,
    'WhereClause': 137,
    'ConditionElement': 138,
    'AvailabilityCondition': 139,
    'MatchingPatternCondition': 140,
    'OptionalBindingCondition': 141,
    'ElseIfContinuation': 142,
    'ElseBlock': 143,
    'SwitchCase': 144,
    'SwitchDefaultLabel': 145,
    'CaseItem': 146,
    'SwitchCaseLabel': 147,
    'CatchClause': 148,
    'GenericWhereClause': 149,
    'SameTypeRequirement': 150,
    'GenericParameter': 151,
    'GenericParameterClause': 152,
    'ConformanceRequirement': 153,
    'CompositionTypeElement': 154,
    'TupleTypeElement': 155,
    'GenericArgument': 156,
    'GenericArgumentClause': 157,
    'TypeAnnotation': 158,
    'TuplePatternElement': 159,
    'AvailabilityArgument': 160,
    'AvailabilityLabeledArgument': 161,
    'AvailabilityVersionRestriction': 162,
    'VersionTuple': 163,
    'CodeBlockItemList': 164,
    'FunctionCallArgumentList': 165,
    'TupleElementList': 166,
    'ArrayElementList': 167,
    'DictionaryElementList': 168,
    'StringInterpolationSegments': 169,
    'DeclNameArgumentList': 170,
    'ExprList': 171,
    'ClosureCaptureItemList': 172,
    'ClosureParamList': 173,
    'ObjcName': 174,
    'FunctionParameterList': 175,
    'IfConfigClauseList': 176,
    'InheritedTypeList': 177,
    'MemberDeclList': 178,
    'ModifierList': 179,
    'AccessPath': 180,
    'AccessorList': 181,
    'PatternBindingList': 182,
    'EnumCaseElementList': 183,
    'PrecedenceGroupAttributeList': 184,
    'PrecedenceGroupNameList': 185,
    'TokenList': 186,
    'NonEmptyTokenList': 187,
    'AttributeList': 188,
    'SpecializeAttributeSpecList': 189,
    'ObjCSelector': 190,
    'SwitchCaseList': 191,
    'CatchClauseList': 192,
    'CaseItemList': 193,
    'ConditionElementList': 194,
    'GenericRequirementList': 195,
    'GenericParameterList': 196,
    'CompositionTypeElementList': 197,
    'TupleTypeElementList': 198,
    'GenericArgumentList': 199,
    'TuplePatternElementList': 200,
    'AvailabilitySpecList': 201,
    'UnknownPattern': 202,
    'EnumCasePattern': 203,
    'IsTypePattern': 204,
    'OptionalPattern': 205,
    'IdentifierPattern': 206,
    'AsTypePattern': 207,
    'TuplePattern': 208,
    'WildcardPattern': 209,
    'ExpressionPattern': 210,
    'ValueBindingPattern': 211,
    'UnknownType': 212,
    'SimpleTypeIdentifier': 213,
    'MemberTypeIdentifier': 214,
    'ClassRestrictionType': 215,
    'ArrayType': 216,
    'DictionaryType': 217,
    'MetatypeType': 218,
    'OptionalType': 219,
    'ImplicitlyUnwrappedOptionalType': 220,
    'CompositionType': 221,
    'TupleType': 222,
    'FunctionType': 223,
    'AttributedType': 224,
    'YieldStmt': 225,
    'YieldList': 226,
    'IdentifierList': 227,
    'NamedAttributeStringArgument': 228,
    'DeclName': 229,
    'PoundAssertStmt': 230,
    'CallDecl': 231,
}


def verify_syntax_node_serialization_codes(nodes, serialization_codes):
    # Verify that all nodes have serialization codes
    for node in nodes:
        if not node.is_base() and node.syntax_kind not in serialization_codes:
            error('Node %s has no serialization code' % node.syntax_kind)

    # Verify that no serialization code is used twice
    used_codes = set()
    for serialization_code in serialization_codes.values():
        if serialization_code in used_codes:
            error("Serialization code %d used twice" % serialization_code)
        used_codes.add(serialization_code)


def get_serialization_code(syntax_kind):
    return SYNTAX_NODE_SERIALIZATION_CODES[syntax_kind]
