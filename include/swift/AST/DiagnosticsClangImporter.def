//===--- DiagnosticsClangImporter.def - Diagnostics Text --------*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
//  This file defines diagnostics for the Clang importer.
//  Each diagnostic is described using one of three kinds (error, warning, or
//  note) along with a unique identifier, category, options, and text, and is
//  followed by a signature describing the diagnostic argument kinds.
//
//===----------------------------------------------------------------------===//

#define DEFINE_DIAGNOSTIC_MACROS
#include "DefineDiagnosticMacros.h"

WARNING(warning_from_clang,none,
  "%0", (StringRef))
ERROR(error_from_clang,none,
  "%0", (StringRef))
NOTE(note_from_clang,none,
  "%0", (StringRef))
REMARK(remark_from_clang,none,
  "%0", (StringRef))

ERROR(clang_cannot_build_module,Fatal,
  "could not build %select{C|Objective-C}0 module '%1'", (bool, StringRef))

ERROR(bridging_header_missing,Fatal,
  "bridging header '%0' does not exist", (StringRef))
ERROR(bridging_header_error,Fatal,
  "failed to import bridging header '%0'", (StringRef))
WARNING(could_not_rewrite_bridging_header,none,
  "failed to serialize bridging header; "
  "target may not be debuggable outside of its original project", ())
ERROR(bridging_header_pch_error,Fatal,
   "failed to emit precompiled header '%0' for bridging header '%1'",
   (StringRef, StringRef))

ERROR(emit_pcm_error,Fatal,
   "failed to emit precompiled module '%0' for module map '%1'",
   (StringRef, StringRef))
ERROR(dump_pcm_error,Fatal,
   "failed to dump precompiled module '%0'", (StringRef))

WARNING(invalid_swift_name_method,none,
  "too %select{few|many}0 parameters in swift_name attribute (expected %1; "
  "got %2)", (bool, unsigned, unsigned))

NOTE(note_while_importing, none, "while importing '%0'", (StringRef))
ERROR(swift_name_protocol_static, none, "swift_name cannot be used to define "
                                         "%select{static member|init}0 on "
                                         "protocol",
      (bool))
ERROR(swift_name_no_prototype, none,
      "swift_name cannot be used on a non-prototyped function declaration", ())

WARNING(inconsistent_swift_name,none,
        "inconsistent Swift name for Objective-C %select{method|property}0 "
        "'%1' in '%2' (%3 in '%4' vs. %5 in '%6')",
        (bool, StringRef, StringRef, DeclName, StringRef, DeclName,
         StringRef))

WARNING(unresolvable_clang_decl,none,
        "imported declaration '%0' could not be mapped to '%1'",
        (StringRef, StringRef))

NOTE(unresolvable_clang_decl_is_a_framework_bug,none,
     "please report this issue to the owners of '%0'",
     (StringRef))

WARNING(clang_swift_attr_without_at,none,
        "Swift attribute '%0' does not start with '@'", (StringRef))

WARNING(implicit_bridging_header_imported_from_module,none,
        "implicit import of bridging header '%0' via module %1 "
        "is deprecated and will be removed in a later version of Swift",
        (StringRef, Identifier))

WARNING(import_multiple_mainactor_attr,none,
      "this attribute for global actor '%0' is invalid; the declaration already has attribute for global actor '%1'",
      (StringRef, StringRef))

ERROR(module_map_not_found, none, "module map file '%0' not found", (StringRef))

REMARK(imported_clang_decl_as,none,
       "%0%select{| %1}1"
       "%select{| also}2 imported as %select{|unavailable }3"
       "%4%select{| %5}5",
       (/*clangDescriptiveKind=*/StringRef, const clang::NamedDecl *,
        /*isAlternative=*/bool, /*isUnavailable=*/bool,
        DescriptiveDeclKind, ValueDecl *))
REMARK(imported_clang_decl_as_accessor,none,
       "%0%select{| %1}1"
       "%select{| also}2 imported as %select{|unavailable }3"
       "%4 for %5 %6",
       (/*clangDescriptiveKind=*/StringRef, const clang::NamedDecl *,
        /*isAlternative=*/bool, /*isUnavailable=*/bool,
        DescriptiveDeclKind, DescriptiveDeclKind, ValueDecl *))
REMARK(imported_clang_decl_as_extension,none,
       "%0%select{| %1}1"
       "%select{| also}2 imported as %select{|unavailable }3"
       "extension of %4",
       (/*clangDescriptiveKind=*/StringRef, const clang::NamedDecl *,
        /*isAlternative=*/bool, /*isUnavailable=*/bool,
        Type))
       
REMARK(did_not_import_clang_decl,none,
       "could not import %0%select{| %1}1",
       (StringRef, const clang::NamedDecl *))

NOTE(note_cannot_import_forward_declaration,none,
     "found only forward declarations of %0 %1; incomplete types cannot be "
     "imported into Swift",
     (StringRef, const clang::NamedDecl *))
NOTE(note_cannot_import_objc_ivars,none,
     "use a property to access this instance variable",
     ())
NOTE(note_cannot_import_context,none,
     "its context could not be imported",                       // FIXME improve
     ())
NOTE(note_cannot_import_type,none,
     "type could not be imported",                              // FIXME improve
     ())
NOTE(note_cannot_import_name,none,
     "could not import Swift name",                             // FIXME improve
     ())
NOTE(note_cannot_import_parameter_list,none,
     "its parameter list could not be imported",                // FIXME improve
     ())
NOTE(note_cannot_import_init_as_accessor,none,
     "methods starting with '-init' cannot be imported as accessors because "
     "they have special memory management behavior",
     ())
NOTE(note_cannot_import_method_named_print_into_old_version,none,
     "methods with the name 'print' are not imported in inactive language "
     "versions to avoid conflicting with the 'print()' function",
     ())
NOTE(note_cannot_import_clang_ast_inconsistent,none,
     "clang AST is in an inconsistent state; please file a compiler bug report "
     "with your code and this message: '%0'",
     (StringRef))
NOTE(note_cannot_import_not_an_accessor,none,
     "%0 %1 cannot be imported as an accessor because it doesn't belong to a "
     "property in Objective-C",
     (StringRef, const clang::NamedDecl *))
NOTE(note_cannot_import_raw_type,none,
     "its raw value type could not be imported",
     ())
NOTE(note_cannot_import_property_redeclaration_merged,none,
     "its attributes have been merged with previous declaration imported as "
     "%0 %1",
     (DescriptiveDeclKind, ValueDecl *))
NOTE(note_cannot_import_property_redeclaration,none,
     "it is declared elsewhere with different accessors",
     ())
NOTE(note_cannot_import_property_overriding_method,none,
     "property overrides %0 %1; this is valid in Objective-C, but not in Swift",
     (StringRef, const clang::NamedDecl *))
NOTE(note_cannot_import_property_broken_up,none,
     "the maintainer of %0 %1 has chosen to import this property's accessors "
     "as methods instead",
     (StringRef, const clang::NamedDecl *))
NOTE(note_cannot_import_at_implementation,none,
     "header files should not include '@implementation' declarations",
     ())
NOTE(note_cannot_import_generic_signature,none,
     "its Objective-C generic signature could not be imported",
     ())
NOTE(note_cannot_import_known_type_not_found,none,
     "importing this %0 requires the type '%1', but it could not be found",
     (StringRef, StringRef))
NOTE(note_cannot_import_class_of_category,none,
     "the class it extends could not be imported",
     ())
NOTE(note_cannot_import_property_accessor,none,
     "its %select{getter|setter}0 could not be imported",
     (bool))
NOTE(note_cannot_import_see_other_decl,none,
     "%0 %1 may have remarks describing why it could not be imported",
     (StringRef, const clang::NamedDecl *))
NOTE(note_cannot_import_is_worse_than_named_alternative,none,
     "a better candidate, %0 %1, is already being imported with the name %2 "
     "and the same signature",
     (StringRef, const clang::NamedDecl *, ValueDecl *))
NOTE(note_cannot_import_is_worse_than_alternative,none,
     "a better candidate is already being imported with the name %2 and the "
     "same signature",
     (ValueDecl *))
NOTE(note_cannot_import_alias_for_unavailable_case,none,
     "cannot import alias %0 for %1 %2 because it is unavailable",
     (Identifier, DescriptiveDeclKind, ValueDecl *))
NOTE(note_cannot_import_subscript_setter_type_mismatch,none,
     "cannot import %0 %1 as a subscript setter matching getter %3 %4 because "
     "the setter's %select{element|index}6 type, %2, does not match the "
     "getter's, %5",
     (/*setterInfo=*/StringRef, const clang::NamedDecl *, Type,
      /*getterInfo=*/StringRef, const clang::NamedDecl *, Type,
      /*isParamType=*/bool))

NOTE(note_imported_from_swift_part,none,
     "replaced by definition for %0 %1 from the Swift %select{part of|overlay "
     "for}2 this module",
     (DescriptiveDeclKind, ValueDecl *, /*overlay=*/bool))

#define UNDEFINE_DIAGNOSTIC_MACROS
#include "DefineDiagnosticMacros.h"
