%{
  from gyb_syntax_support import *
  from gyb_syntax_support.kinds import SYNTAX_BASE_KINDS
  grouped_nodes = { kind: [] for kind in SYNTAX_BASE_KINDS }
  for node in SYNTAX_NODES:
    grouped_nodes[node.base_kind].append(node)
  # Ignore the following admonition; it applies to the resulting .cpp file only
}%
//// Automatically Generated From SyntaxDeserialization.cpp.gyb.
//// Do Not Edit Directly!
//===---------------------- SytnaxDeserialization.cpp ---------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2021 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

#include "swift/Syntax/Serialization/SyntaxDeserialization.h"

namespace swift {
namespace serialization {

syntax::SyntaxKind getSyntaxKindFromNumericValue(uint16_t Value) {
  switch (Value) {
  case 0:
    return syntax::SyntaxKind::Token;
  case 1:
    return syntax::SyntaxKind::Unknown;
% for name, nodes in grouped_nodes.items():
%   for node in nodes:
  case ${SYNTAX_NODE_SERIALIZATION_CODES[node.syntax_kind]}:
    return syntax::SyntaxKind::${node.syntax_kind};
%   end
% end
  }
  llvm_unreachable("unhandled kind");
}

tok getTokFromNumericValue(uint8_t Value) {
  switch (Value) {
    case 0: return tok::eof;

% for token in SYNTAX_TOKENS:
    case ${token.serialization_code}: return tok::${token.kind};
% end
  }
  llvm_unreachable("unhandled token");
}

} // end namespace serialization
} // end namespace swift
