// Ensure that we do not export any weak symbols from the dylibs.
//
// Weak symbols require additional work from the loader to resolve the symbol at
// load time and can cause ODR violations as well as unexpected symbol
// satisfaction because the weak symbol may be used from a separate module.

// NOTE: this test is fragile.  It is dependent on the specifics of the GNU C++
// runtime.  The C++ headers from the runtime explicitly force the weak symbols
// to be publicly visible without allowing the user to control the visibility.
// We filter out all leaked ::std:: symbols and explicitly filter out any
// remaining symbols after after manually validating that they are being leaked
// because of the forceful nature of libstdc++.
//
// To expand the `sed`:
//   - `_Z` mangling prefix
//   - `GTt` transaction entry point
//   - `Z` couldn't find this, but seems to occur frequently
//   - `N` nested name
//   - `rVKRO` CVR and ref qualifiers
//   - `S[tabsiod]` shortened name for `std` and various common types

// RUN: %empty-directory(%t)

// RUN: %llvm-nm --defined-only --extern-only %platform-dylib-dir/%target-library-name(swiftCore) > %t/swiftCore-all.txt
// RUN: sed -Ene '/_Z(GTt)?Z?N?[rVKRO]?S[tabsiod]/!p' %t/swiftCore-all.txt \
// RUN:   | grep -v -e _ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z \
// RUN:             -e _ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_St9__va_listEmSB_z \
// RUN:             -e _ZN9__gnu_cxx12__to_xstringISscEET_PFiPT0_mPKS2_P13__va_list_tagEmS5_z \
// RUN:             -e _ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv \
// RUN:   > %t/swiftCore-all-cleaned.txt
// RUN: %llvm-nm --defined-only --extern-only --no-weak %platform-dylib-dir/%target-library-name(swiftCore) > %t/swiftCore-no-weak.txt
// RUN: diff -u %t/swiftCore-all-cleaned.txt %t/swiftCore-no-weak.txt

// RUN: %llvm-nm --defined-only --extern-only %platform-dylib-dir/%target-library-name(swiftRemoteMirror) > %t/swiftRemoteMirror-all.txt
// RUN: sed -Ene '/_Z(GTt)?Z?N?[rVKRO]?S[tabsiod]/!p' %t/swiftRemoteMirror-all.txt \
// RUN:   | grep -v -e _ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z \
// RUN:             -e _ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_St9__va_listEmSB_z \
// RUN:             -e _ZN9__gnu_cxx12__to_xstringISscEET_PFiPT0_mPKS2_P13__va_list_tagEmS5_z \
// RUN:             -e _ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv \
// RUN:   > %t/swiftRemoteMirror-all-cleaned.txt
// RUN: %llvm-nm --defined-only --extern-only --no-weak %platform-dylib-dir/%target-library-name(swiftRemoteMirror) > %t/swiftRemoteMirror-no-weak.txt
// RUN: diff -u %t/swiftRemoteMirror-all-cleaned.txt %t/swiftRemoteMirror-no-weak.txt

// NOTE: swiftDemanging is not checked because it is incorporated into
// swiftCore and swiftRemoteMirror.  Both of those checks ensure that the
// symbols are handled properly.

// REQUIRES: OS=linux-gnu
