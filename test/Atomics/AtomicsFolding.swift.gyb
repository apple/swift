// RUN: %empty-directory(%t)
// RUN: %gyb %s > %t/AtomicsFolding.swift
//
// RUN: %target-swift-frontend -parse-as-library -emit-sil -Onone -module-name AtomicsFolding %t/AtomicsFolding.swift > %t/AtomicsFolding-Onone.sil
// RUN: %FileCheck --check-prefixes=SECTIONING,CHECK      --input-file=%t/AtomicsFolding-Onone.sil %t/AtomicsFolding.swift
// RUN: %FileCheck --check-prefixes=SECTIONING,EXCLUSIONS --input-file=%t/AtomicsFolding-Onone.sil %t/AtomicsFolding.swift
//
// RUN: %target-swift-frontend -parse-as-library -emit-sil -O -module-name AtomicsFolding %t/AtomicsFolding.swift > %t/AtomicsFolding-O.sil
// RUN: %FileCheck --check-prefixes=SECTIONING,CHECK      --input-file=%t/AtomicsFolding-O.sil %t/AtomicsFolding.swift
// RUN: %FileCheck --check-prefixes=SECTIONING,EXCLUSIONS --input-file=%t/AtomicsFolding-O.sil %t/AtomicsFolding.swift
//
// RUN: %target-swift-frontend -parse-as-library -emit-sil -Osize -module-name AtomicsFolding %t/AtomicsFolding.swift > %t/AtomicsFolding-Osize.sil
// RUN: %FileCheck --check-prefixes=SECTIONING,CHECK      --input-file=%t/AtomicsFolding-Osize.sil %t/AtomicsFolding.swift
// RUN: %FileCheck --check-prefixes=SECTIONING,EXCLUSIONS --input-file=%t/AtomicsFolding-Osize.sil %t/AtomicsFolding.swift

// Tests that atomic operations get compiled to the expected builtins, and only
// the expected builtins. (I.e., that the switch statements over the orderings
// get constant folded away.)

%{
  integer_types = [
    # Label    Type      Builtin
    ("Int",    "Int",    "Word"),
    ("Int64",  "Int64",  "Int64"),
    ("Int32",  "Int32",  "Int32"),
    ("Int16",  "Int16",  "Int16"),
    ("Int8",   "Int8",   "Int8"),
    ("UInt",   "UInt",   "Word"),
    ("UInt64", "UInt64", "Int64"),
    ("UInt32", "UInt32", "Int32"),
    ("UInt16", "UInt16", "Int16"),
    ("UInt8",  "UInt8",  "Int8"),
  ]

  pointer_types = [
    # Label                             Type                                   Builtin
    ("UnsafeRawPointer",                "UnsafeRawPointer",                    "RawPointer"),
    ("UnsafeMutableRawPointer",         "UnsafeMutableRawPointer",             "RawPointer"),
    ("UnsafePointer",                   "UnsafePointer<Foo>",                  "RawPointer"),
    ("UnsafeMutablePointer",            "UnsafeMutablePointer<Foo>",           "RawPointer"),
    ("Unmanaged",                       "Unmanaged<Bar>",                      "RawPointer"),
    ("OptionalUnsafeRawPointer",        "Optional<UnsafeRawPointer>",          "RawPointer"),
    ("OptionalUnsafeMutableRawPointer", "Optional<UnsafeMutableRawPointer>",   "RawPointer"),
    ("OptionalUnsafePointer",           "Optional<UnsafePointer<Foo>>",        "RawPointer"),
    ("OptionalUnsafeMutablePointer",    "Optional<UnsafeMutablePointer<Foo>>", "RawPointer"),
    ("OptionalUnmanaged",               "Optional<Unmanaged<Bar>>",            "RawPointer"),
  ]

  all_types = integer_types + pointer_types

  integer_operations = [
    # API Name            LLVM Op     Arg Label
    ('loadThenWrappingIncrement', 'add',      "by"),
    ('loadThenWrappingDecrement', 'sub',      "by"),
    ('loadThenBitwiseAnd',        'and',      "with"),
    ('loadThenBitwiseOr',         'or',       "with"),
    ('loadThenBitwiseXor',        'xor',      "with"),
    ('wrappingIncrementThenLoad', 'add',      "by"),
    ('wrappingDecrementThenLoad', 'sub',      "by"),
    ('bitwiseAndThenLoad',        'and',      "with"),
    ('bitwiseOrThenLoad',         'or',       "with"),
    ('bitwiseXorThenLoad',        'xor',      "with"),
  ]
}%

import Atomics

public struct Foo {}
public class Bar {}

// -----------------------------------------------------------------------------

% for (label, type, builtin) in all_types:
// SECTIONING-LABEL: // load_${label}_relaxed(_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func load_${label}_relaxed(
  _ value: UnsafeAtomicPointer<${type}>
) -> ${type} {
  // CHECK: builtin "atomicload_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicload_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicload_seqcst_${builtin}"
  return value.load(ordering: .relaxed)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // load_${label}_acquiring(_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func load_${label}_acquiring(
  _ value: UnsafeAtomicPointer<${type}>
) -> ${type} {
  // EXCLUSIONS-NOT: builtin "atomicload_monotonic_${builtin}"
  // CHECK: builtin "atomicload_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicload_seqcst_${builtin}"
  return value.load(ordering: .acquiring)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // load_${label}_sequential(_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func load_${label}_sequential(
  _ value: UnsafeAtomicPointer<${type}>
) -> ${type} {
  // EXCLUSIONS-NOT: builtin "atomicload_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicload_acquire_${builtin}"
  // CHECK: builtin "atomicload_seqcst_${builtin}"
  return value.load(ordering: .sequentiallyConsistent)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

%end
// -----------------------------------------------------------------------------

% for (label, type, builtin) in all_types:
// SECTIONING-LABEL: // store_${label}_relaxed(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func store_${label}_relaxed(
  _ value: UnsafeAtomicPointer<${type}>,
  _ desired: ${type}
) {
  // CHECK: builtin "atomicstore_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicstore_release_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicstore_seqcst_${builtin}"
  value.store(desired, ordering: .relaxed)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // store_${label}_releasing(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func store_${label}_releasing(
  _ value: UnsafeAtomicPointer<${type}>,
  _ desired: ${type}
) {
  // EXCLUSIONS-NOT: builtin "atomicstore_monotonic_${builtin}"
  // CHECK: builtin "atomicstore_release_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicstore_seqcst_${builtin}"
  value.store(desired, ordering: .releasing)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // store_${label}_sequential(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func store_${label}_sequential(
  _ value: UnsafeAtomicPointer<${type}>,
  _ desired: ${type}
) {
  // EXCLUSIONS-NOT: builtin "atomicstore_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicstore_release_${builtin}"
  // CHECK: builtin "atomicstore_seqcst_${builtin}"
  value.store(desired, ordering: .sequentiallyConsistent)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

%end
// -----------------------------------------------------------------------------

% for (label, type, builtin) in all_types:
// SECTIONING-LABEL: // exchange_${label}_relaxed(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func exchange_${label}_relaxed(
  _ value: UnsafeAtomicPointer<${type}>,
  _ desired: ${type}
) -> ${type}  {
  // CHECK: builtin "atomicrmw_xchg_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_release_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_acqrel_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_seqcst_${builtin}"
  return value.exchange(desired, ordering: .relaxed)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // exchange_${label}_acquiring(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func exchange_${label}_acquiring(
  _ value: UnsafeAtomicPointer<${type}>,
  _ desired: ${type}
) -> ${type}  {
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_monotonic_${builtin}"
  // CHECK: builtin "atomicrmw_xchg_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_release_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_acqrel_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_seqcst_${builtin}"
  return value.exchange(desired, ordering: .acquiring)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // exchange_${label}_releasing(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func exchange_${label}_releasing(
  _ value: UnsafeAtomicPointer<${type}>,
  _ desired: ${type}
) -> ${type}  {
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_acquire_${builtin}"
  // CHECK: builtin "atomicrmw_xchg_release_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_acqrel_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_seqcst_${builtin}"
  return value.exchange(desired, ordering: .releasing)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // exchange_${label}_acquiringAndReleasing(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func exchange_${label}_acquiringAndReleasing(
  _ value: UnsafeAtomicPointer<${type}>,
  _ desired: ${type}
) -> ${type}  {
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_release_${builtin}"
  // CHECK: builtin "atomicrmw_xchg_acqrel_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_seqcst_${builtin}"
  return value.exchange(desired, ordering: .acquiringAndReleasing)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // exchange_${label}_sequential(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func exchange_${label}_sequential(
  _ value: UnsafeAtomicPointer<${type}>,
  _ desired: ${type}
) -> ${type}  {
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_release_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_xchg_acqrel_${builtin}"
  // CHECK: builtin "atomicrmw_xchg_seqcst_${builtin}"
  return value.exchange(desired, ordering: .sequentiallyConsistent)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

%end
// -----------------------------------------------------------------------------

% for (label, type, builtin) in all_types:
// SECTIONING-LABEL: // compareExchange_${label}_relaxed(_:_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func compareExchange_${label}_relaxed(
  _ value: UnsafeAtomicPointer<${type}>,
  _ expected: ${type},
  _ desired: ${type}
) -> (exchanged: Bool, original: ${type})  {
  // CHECK: builtin "cmpxchg_monotonic_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acquire_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_release_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acqrel_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_seqcst_{{[a-z0-9_]*}}_${builtin}"
  return value.compareExchange(
    expected: expected,
    desired: desired,
    ordering: .relaxed)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // compareExchange_${label}_acquiring(_:_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func compareExchange_${label}_acquiring(
  _ value: UnsafeAtomicPointer<${type}>,
  _ expected: ${type},
  _ desired: ${type}
) -> (exchanged: Bool, original: ${type})  {
  // EXCLUSIONS-NOT: builtin "cmpxchg_monotonic_{{[a-z0-9_]*}}_${builtin}"
  // CHECK: builtin "cmpxchg_acquire_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_release_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acqrel_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_seqcst_{{[a-z0-9_]*}}_${builtin}"
  return value.compareExchange(
    expected: expected,
    desired: desired,
    ordering: .acquiring)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // compareExchange_${label}_releasing(_:_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func compareExchange_${label}_releasing(
  _ value: UnsafeAtomicPointer<${type}>,
  _ expected: ${type},
  _ desired: ${type}
) -> (exchanged: Bool, original: ${type})  {
  // EXCLUSIONS-NOT: builtin "cmpxchg_monotonic_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acquire_{{[a-z0-9_]*}}_${builtin}"
  // CHECK: builtin "cmpxchg_release_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acqrel_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_seqcst_{{[a-z0-9_]*}}_${builtin}"
  return value.compareExchange(
    expected: expected,
    desired: desired,
    ordering: .releasing)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // compareExchange_${label}_acquiringAndReleasing(_:_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func compareExchange_${label}_acquiringAndReleasing(
  _ value: UnsafeAtomicPointer<${type}>,
  _ expected: ${type},
  _ desired: ${type}
) -> (exchanged: Bool, original: ${type})  {
  // EXCLUSIONS-NOT: builtin "cmpxchg_monotonic_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acquire_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_release_{{[a-z0-9_]*}}_${builtin}"
  // CHECK: builtin "cmpxchg_acqrel_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_seqcst_{{[a-z0-9_]*}}_${builtin}"
  return value.compareExchange(
    expected: expected,
    desired: desired,
    ordering: .acquiringAndReleasing)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // compareExchange_${label}_sequential(_:_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func compareExchange_${label}_sequential(
  _ value: UnsafeAtomicPointer<${type}>,
  _ expected: ${type},
  _ desired: ${type}
) -> (exchanged: Bool, original: ${type})  {
  // EXCLUSIONS-NOT: builtin "cmpxchg_monotonic_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acquire_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_release_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acqrel_{{[a-z0-9_]*}}_${builtin}"
  // CHECK: builtin "cmpxchg_seqcst_seqcst_${builtin}"
  return value.compareExchange(
    expected: expected,
    desired: desired,
    ordering: .sequentiallyConsistent)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

% end
// -----------------------------------------------------------------------------
// FIXME: There are 15 valid combinations of success/failure orderings;
// here we're only testing 6 of them.

% for (label, type, builtin) in all_types:
// SECTIONING-LABEL: // compareExchange2_${label}_relaxed_relaxed(_:_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func compareExchange2_${label}_relaxed_relaxed(
  _ value: UnsafeAtomicPointer<${type}>,
  _ expected: ${type},
  _ desired: ${type}
) -> (exchanged: Bool, original: ${type})  {
  // CHECK: builtin "cmpxchg_monotonic_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_monotonic_{{[^m][a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acquire_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_release_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acqrel_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_seqcst_{{[a-z0-9_]*}}_${builtin}"
  return value.compareExchange(
    expected: expected,
    desired: desired,
    ordering: .relaxed,
    failureOrdering: .relaxed)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // compareExchange2_${label}_acquiring_relaxed(_:_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func compareExchange2_${label}_acquiring_relaxed(
  _ value: UnsafeAtomicPointer<${type}>,
  _ expected: ${type},
  _ desired: ${type}
) -> (exchanged: Bool, original: ${type})  {
  // CHECK: builtin "cmpxchg_acquire_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_monotonic_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acquire_{{[^m][a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_release_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acqrel_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_seqcst_{{[a-z0-9_]*}}_${builtin}"
  return value.compareExchange(
    expected: expected,
    desired: desired,
    ordering: .acquiring,
    failureOrdering: .relaxed)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // compareExchange2_${label}_acquiring_acquiring(_:_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func compareExchange2_${label}_acquiring_acquiring(
  _ value: UnsafeAtomicPointer<${type}>,
  _ expected: ${type},
  _ desired: ${type}
) -> (exchanged: Bool, original: ${type})  {
  // CHECK: builtin "cmpxchg_acquire_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_monotonic_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acquire_{{[^a][a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_release_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acqrel_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_seqcst_{{[a-z0-9_]*}}_${builtin}"
  return value.compareExchange(
    expected: expected,
    desired: desired,
    ordering: .acquiring,
    failureOrdering: .acquiring)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // compareExchange2_${label}_sequential_acquiring(_:_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func compareExchange2_${label}_sequential_acquiring(
  _ value: UnsafeAtomicPointer<${type}>,
  _ expected: ${type},
  _ desired: ${type}
) -> (exchanged: Bool, original: ${type})  {
  // CHECK: builtin "cmpxchg_seqcst_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_monotonic_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acquire_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_release_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acqrel_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_seqcst_{{[^a][a-z0-9_]*}}_${builtin}"
  return value.compareExchange(
    expected: expected,
    desired: desired,
    ordering: .sequentiallyConsistent,
    failureOrdering: .acquiring)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding


// SECTIONING-LABEL: // compareExchange2_${label}_releasing_acquiring(_:_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func compareExchange2_${label}_releasing_acquiring(
  _ value: UnsafeAtomicPointer<${type}>,
  _ expected: ${type},
  _ desired: ${type}
) -> (exchanged: Bool, original: ${type})  {
  // FIXME: This should be checking for "cmpxchg_release_acquire", but we don't
  // support arbitrary failure orderings yet, so internally we promote success
  // orderings to be at least as strong as the failure ordering.

  // CHECK: builtin "cmpxchg_acqrel_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_monotonic_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acquire_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_release_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acqrel_{{[^a][a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_seqcst_{{[a-z0-9_]*}}_${builtin}"
  return value.compareExchange(
    expected: expected,
    desired: desired,
    ordering: .releasing,
    failureOrdering: .acquiring)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // compareExchange2_${label}_relaxed_sequential(_:_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func compareExchange2_${label}_relaxed_sequential(
  _ value: UnsafeAtomicPointer<${type}>,
  _ expected: ${type},
  _ desired: ${type}
) -> (exchanged: Bool, original: ${type})  {
  // FIXME: This should be checking for "cmpxchg_monotonic_seqcst", but we don't
  // support arbitrary failure orderings yet, so internally we promote success
  // orderings to be at least as strong as the failure ordering.

  // CHECK: builtin "cmpxchg_seqcst_seqcst_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_monotonic_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acquire_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_release_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_acqrel_{{[a-z0-9_]*}}_${builtin}"
  // EXCLUSIONS-NOT: builtin "cmpxchg_seqcst_{{[^s][a-z0-9_]*}}_${builtin}"
  return value.compareExchange(
    expected: expected,
    desired: desired,
    ordering: .relaxed,
    failureOrdering: .sequentiallyConsistent)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

% end
// -----------------------------------------------------------------------------

% for (label, type, builtin) in integer_types:
%   for (operation, llvmOp, argLabel) in integer_operations:
// SECTIONING-LABEL: // ${operation}_${label}_relaxed(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func ${operation}_${label}_relaxed(
  _ value: UnsafeAtomicPointer<${type}>,
  _ operand: ${type}
) -> ${type} {
  // CHECK: builtin "atomicrmw_${llvmOp}_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_release_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_acqrel_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_seqcst_${builtin}"
  return value.${operation}(${argLabel}: operand, ordering: .relaxed)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // ${operation}_${label}_acquiring(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func ${operation}_${label}_acquiring(
  _ value: UnsafeAtomicPointer<${type}>,
  _ operand: ${type}
) -> ${type} {
  // CHECK: builtin "atomicrmw_${llvmOp}_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_release_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_acqrel_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_seqcst_${builtin}"
  return value.${operation}(${argLabel}: operand, ordering: .acquiring)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // ${operation}_${label}_releasing(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func ${operation}_${label}_releasing(
  _ value: UnsafeAtomicPointer<${type}>,
  _ operand: ${type}
) -> ${type} {
  // CHECK: builtin "atomicrmw_${llvmOp}_release_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_acqrel_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_seqcst_${builtin}"
  return value.${operation}(${argLabel}: operand, ordering: .releasing)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // ${operation}_${label}_acquiringAndReleasing(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func ${operation}_${label}_acquiringAndReleasing(
  _ value: UnsafeAtomicPointer<${type}>,
  _ operand: ${type}
) -> ${type} {
  // CHECK: builtin "atomicrmw_${llvmOp}_acqrel_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_release_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_seqcst_${builtin}"
  return value.${operation}(
    ${argLabel}: operand,
    ordering: .acquiringAndReleasing)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

// SECTIONING-LABEL: // ${operation}_${label}_sequential(_:_:)
@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
public func ${operation}_${label}_sequential(
  _ value: UnsafeAtomicPointer<${type}>,
  _ operand: ${type}
) -> ${type} {
  // CHECK: builtin "atomicrmw_${llvmOp}_seqcst_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_monotonic_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_acquire_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_release_${builtin}"
  // EXCLUSIONS-NOT: builtin "atomicrmw_${llvmOp}_acqrel_${builtin}"
  return value.${operation}(
    ${argLabel}: operand,
    ordering: .sequentiallyConsistent)
}
// SECTIONING-LABEL: } // end sil function '$s14AtomicsFolding

%   end
% end
// -----------------------------------------------------------------------------

