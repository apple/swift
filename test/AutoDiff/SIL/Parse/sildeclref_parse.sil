// RUN: %target-sil-opt -enable-experimental-differentiable-programming %s -module-name=sildeclref_parse | %target-sil-opt -enable-experimental-differentiable-programming -module-name=sildeclref_parse | %FileCheck %s
// REQUIRES: differentiable_programming

// Parse AutoDiff derivative SILDeclRefs via `witness_method` instructions.
// TODO(TF-1212): Also test `class_method` instructions.

import Swift
import _Differentiation

protocol Protocol {
  @differentiable(wrt: (x, y))
  func f(_ x: Float, _ y: Float) -> Float
}

// CHECK-LABEL: sil hidden @witness_method
sil hidden @witness_method : $@convention(thin) <T where T : Protocol> (@in T) -> () {
bb0(%0 : $*T):
  // CHECK: witness_method $T, #Protocol.f
  %1 = witness_method $T, #Protocol.f : <Self where Self : Protocol> (Self) -> (Float, Float) -> Float : $@convention(witness_method: Protocol) <τ_0_0 where τ_0_0 : Protocol> (@in_guaranteed τ_0_0) -> (Float, Float) -> Float

  // CHECK: witness_method $T, #Protocol.f!jvp.SSS
  %2 = witness_method $T, #Protocol.f!jvp.SSS : <Self where Self : Protocol> (Self) -> (Float, Float) -> Float : $@convention(witness_method: Protocol) <τ_0_0 where τ_0_0 : Protocol> (@in_guaranteed τ_0_0) -> (Float, Float) -> Float

  // CHECK: witness_method $T, #Protocol.f!jvp.UUS
  %3 = witness_method $T, #Protocol.f!jvp.UUS : <Self where Self : Protocol> (Self) -> (Float, Float) -> Float : $@convention(witness_method: Protocol) <τ_0_0 where τ_0_0 : Protocol> (@in_guaranteed τ_0_0) -> (Float, Float) -> Float

  // CHECK: witness_method $T, #Protocol.f!vjp.SSS
  %4 = witness_method $T, #Protocol.f!vjp.SSS : <Self where Self : Protocol> (Self) -> (Float, Float) -> Float : $@convention(witness_method: Protocol) <τ_0_0 where τ_0_0 : Protocol> (@in_guaranteed τ_0_0) -> (Float, Float) -> Float

  // CHECK: witness_method $T, #Protocol.f!vjp.UUS
  %5 = witness_method $T, #Protocol.f!vjp.UUS : <Self where Self : Protocol> (Self) -> (Float, Float) -> Float : $@convention(witness_method: Protocol) <τ_0_0 where τ_0_0 : Protocol> (@in_guaranteed τ_0_0) -> (Float, Float) -> Float

  %6 = tuple ()
  return %6 : $()
}
