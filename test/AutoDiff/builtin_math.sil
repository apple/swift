// RUN: %target-sil-opt -differentiation %s | %FileCheck %s

import Builtin
import Swift

sil_stage raw

sil hidden @simple_mul : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32 {
bb0(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32):
  %2 = builtin "fmul_FPIEEE32"(%0 : $Builtin.FPIEEE32, %1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
  return %2 : $Builtin.FPIEEE32
}

// sil hidden @chain_rule : $@convention(thin) (Builtin.FPIEEE32) -> Builtin.FPIEEE32 {
// bb0(%0 : $Builtin.FPIEEE32):
//   %1 = builtin "fmul_FPIEEE32"(%0 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
//   %2 = builtin "fneg_FPIEEE32"(%1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
//   return %2 : $Builtin.FPIEEE32
// }

// sil hidden @fan_out : $@convention(thin) (Builtin.FPIEEE32) -> Builtin.FPIEEE32 {
// bb0(%0 : $Builtin.FPIEEE32):
//   %1 = builtin "fneg_FPIEEE32"(%0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
//   %2 = builtin "fneg_FPIEEE32"(%0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
//   %3 = builtin "fmul_FPIEEE32"(%1 : $Builtin.FPIEEE32, %2 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
//   %4 = builtin "fneg_FPIEEE32"(%3 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
//   return %4 : $Builtin.FPIEEE32
// }

sil hidden @main : $@convention(thin) (Builtin.FPIEEE32) -> () {
bb0(%0 : $Builtin.FPIEEE32):
  // Test simple_mul
  %simple_mul = function_ref @simple_mul : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32
  %simple_mul_grad = gradient [source 0] [wrt 0, 1] %simple_mul : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32
  apply %simple_mul_grad(%0, %0) : $@convention(thin) (Builtin.FPIEEE32, Builtin.FPIEEE32) -> (Builtin.FPIEEE32, Builtin.FPIEEE32)

  // // Test chain_rule
  // %chain_rule = function_ref @chain_rule : $@convention(thin) (Builtin.FPIEEE32) -> Builtin.FPIEEE32
  // %chain_rule_grad = gradient [source 0] [wrt 0] %chain_rule : $@convention(thin) (Builtin.FPIEEE32) -> Builtin.FPIEEE32
  // apply %chain_rule_grad(%0) : $@convention(thin) (Builtin.FPIEEE32) -> Builtin.FPIEEE32

  // // Test fan_out
  // %fan_out = function_ref @fan_out : $@convention(thin) (Builtin.FPIEEE32) -> Builtin.FPIEEE32
  // %fan_out_grad = gradient [source 0] [wrt 0] %fan_out : $@convention(thin) (Builtin.FPIEEE32) -> Builtin.FPIEEE32
  // apply %fan_out_grad(%0) : $@convention(thin) (Builtin.FPIEEE32) -> Builtin.FPIEEE32

  // // Return
  %ret = tuple ()
  return %ret : $()
}

// CHECK-LABEL: @simple_mul__primal_src_0_wrt_0 : $@convention(thin) (Builtin.FPIEEE32) -> (@owned simple_mul__Type, Builtin.FPIEEE32) {
// CHECK: // %0                                             // users: %1, %1
// CHECK: bb0(%0 : $Builtin.FPIEEE32):
// CHECK:   %1 = builtin "fmul_FPIEEE32"(%0 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %3
// CHECK:   %2 = struct $simple_mul__Type ()                // user: %3
// CHECK:   %3 = tuple (%2 : $simple_mul__Type, %1 : $Builtin.FPIEEE32) // user: %4
// CHECK:   return %3 : $(simple_mul__Type, Builtin.FPIEEE32) // id: %4
// CHECK: } // end sil function 'simple_mul__primal_src_0_wrt_0'

// CHECK-LABEL: @chain_rule__primal_src_0_wrt_0 : $@convention(thin) (Builtin.FPIEEE32) -> (@owned chain_rule__Type, Builtin.FPIEEE32) {
// CHECK: // %0                                             // users: %1, %1
// CHECK: bb0(%0 : $Builtin.FPIEEE32):
// CHECK:   %1 = builtin "fmul_FPIEEE32"(%0 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %2
// CHECK:   %2 = builtin "fneg_FPIEEE32"(%1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %4
// CHECK:   %3 = struct $chain_rule__Type ()                // user: %4
// CHECK:   %4 = tuple (%3 : $chain_rule__Type, %2 : $Builtin.FPIEEE32) // user: %5
// CHECK:   return %4 : $(chain_rule__Type, Builtin.FPIEEE32) // id: %5
// CHECK: } // end sil function 'chain_rule__primal_src_0_wrt_0'

// CHECK-LABEL: @fan_out__primal_src_0_wrt_0 : $@convention(thin) (Builtin.FPIEEE32) -> (@owned fan_out__Type, Builtin.FPIEEE32) {
// CHECK: // %0                                             // users: %1, %1
// CHECK: bb0(%0 : $Builtin.FPIEEE32):
// CHECK:   %1 = builtin "fmul_FPIEEE32"(%0 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // users: %3, %2
// CHECK:   %2 = builtin "fneg_FPIEEE32"(%1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %4
// CHECK:   %3 = builtin "fneg_FPIEEE32"(%1 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %4
// CHECK:   %4 = builtin "fadd_FPIEEE32"(%2 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %6
// CHECK:   %5 = struct $fan_out__Type ()                   // user: %6
// CHECK:   %6 = tuple (%5 : $fan_out__Type, %4 : $Builtin.FPIEEE32) // user: %7
// CHECK:   return %6 : $(fan_out__Type, Builtin.FPIEEE32)  // id: %7
// CHECK: } // end sil function 'fan_out__primal_src_0_wrt_0'

// CHECK-LABEL: @simple_mul__adjoint_src_0_wrt_0 : $@convention(thin) (Builtin.FPIEEE32, simple_mul__Type, Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32 {
// CHECK: // %0                                             // users: %12, %11
// CHECK: bb0(%0 : $Builtin.FPIEEE32, %1 : $simple_mul__Type, %2 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32):
// CHECK:   %4 = alloc_stack $Builtin.FPIEEE32              // users: %10, %9, %5
// CHECK:   %5 = begin_access [init] [static] [no_nested_conflict] %4 : $*Builtin.FPIEEE32 // users: %8, %7
// CHECK:   %6 = float_literal $Builtin.FPIEEE32, 0x0 // 0  // user: %7
// CHECK:   store %6 to [trivial] %5 : $*Builtin.FPIEEE32   // id: %7
// CHECK:   end_access %5 : $*Builtin.FPIEEE32              // id: %8
// CHECK:   %9 = load [trivial] %4 : $*Builtin.FPIEEE32     // users: %12, %11
// CHECK:   dealloc_stack %4 : $*Builtin.FPIEEE32           // id: %10
// CHECK:   %11 = builtin "fmul_FPIEEE32"(%9 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %13
// CHECK:   %12 = builtin "fmul_FPIEEE32"(%9 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %13
// CHECK:   %13 = builtin "fadd_FPIEEE32"(%11 : $Builtin.FPIEEE32, %12 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %14 = alloc_stack $Builtin.FPIEEE32             // users: %20, %19, %15
// CHECK:   %15 = begin_access [init] [static] [no_nested_conflict] %14 : $*Builtin.FPIEEE32 // users: %18, %17
// CHECK:   %16 = float_literal $Builtin.FPIEEE32, 0x0 // 0 // user: %17
// CHECK:   store %16 to [trivial] %15 : $*Builtin.FPIEEE32 // id: %17
// CHECK:   end_access %15 : $*Builtin.FPIEEE32             // id: %18
// CHECK:   %19 = load [trivial] %14 : $*Builtin.FPIEEE32   // user: %21
// CHECK:   dealloc_stack %14 : $*Builtin.FPIEEE32          // id: %20
// CHECK:   return %19 : $Builtin.FPIEEE32                  // id: %21
// CHECK: } // end sil function 'simple_mul__adjoint_src_0_wrt_0'


// CHECK-LABEL: @chain_rule__adjoint_src_0_wrt_0 : $@convention(thin) (Builtin.FPIEEE32, chain_rule__Type, Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32 {
// CHECK: // %0                                             // users: %12, %11
// CHECK: bb0(%0 : $Builtin.FPIEEE32, %1 : $chain_rule__Type, %2 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32):
// CHECK:   %4 = alloc_stack $Builtin.FPIEEE32              // users: %10, %9, %5
// CHECK:   %5 = begin_access [init] [static] [no_nested_conflict] %4 : $*Builtin.FPIEEE32 // users: %8, %7
// CHECK:   %6 = float_literal $Builtin.FPIEEE32, 0x0 // 0  // user: %7
// CHECK:   store %6 to [trivial] %5 : $*Builtin.FPIEEE32   // id: %7
// CHECK:   end_access %5 : $*Builtin.FPIEEE32              // id: %8
// CHECK:   %9 = load [trivial] %4 : $*Builtin.FPIEEE32     // users: %12, %11
// CHECK:   dealloc_stack %4 : $*Builtin.FPIEEE32           // id: %10
// CHECK:   %11 = builtin "fmul_FPIEEE32"(%9 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %13
// CHECK:   %12 = builtin "fmul_FPIEEE32"(%9 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %13
// CHECK:   %13 = builtin "fadd_FPIEEE32"(%11 : $Builtin.FPIEEE32, %12 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %14 = alloc_stack $Builtin.FPIEEE32             // users: %20, %19, %15
// CHECK:   %15 = begin_access [init] [static] [no_nested_conflict] %14 : $*Builtin.FPIEEE32 // users: %18, %17
// CHECK:   %16 = float_literal $Builtin.FPIEEE32, 0x0 // 0 // user: %17
// CHECK:   store %16 to [trivial] %15 : $*Builtin.FPIEEE32 // id: %17
// CHECK:   end_access %15 : $*Builtin.FPIEEE32             // id: %18
// CHECK:   %19 = load [trivial] %14 : $*Builtin.FPIEEE32   // user: %21
// CHECK:   dealloc_stack %14 : $*Builtin.FPIEEE32          // id: %20
// CHECK:   return %19 : $Builtin.FPIEEE32                  // id: %21
// CHECK: } // end sil function 'chain_rule__adjoint_src_0_wrt_0'

// CHECK-LABEL: @fan_out__adjoint_src_0_wrt_0 : $@convention(thin) (Builtin.FPIEEE32, fan_out__Type, Builtin.FPIEEE32, Builtin.FPIEEE32) -> Builtin.FPIEEE32 {
// CHECK: // %0                                             // users: %12, %11
// CHECK: bb0(%0 : $Builtin.FPIEEE32, %1 : $fan_out__Type, %2 : $Builtin.FPIEEE32, %3 : $Builtin.FPIEEE32):
// CHECK:   %4 = alloc_stack $Builtin.FPIEEE32              // users: %10, %9, %5
// CHECK:   %5 = begin_access [init] [static] [no_nested_conflict] %4 : $*Builtin.FPIEEE32 // users: %8, %7
// CHECK:   %6 = float_literal $Builtin.FPIEEE32, 0x0 // 0  // user: %7
// CHECK:   store %6 to [trivial] %5 : $*Builtin.FPIEEE32   // id: %7
// CHECK:   end_access %5 : $*Builtin.FPIEEE32              // id: %8
// CHECK:   %9 = load [trivial] %4 : $*Builtin.FPIEEE32     // users: %12, %11
// CHECK:   dealloc_stack %4 : $*Builtin.FPIEEE32           // id: %10
// CHECK:   %11 = builtin "fmul_FPIEEE32"(%9 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %13
// CHECK:   %12 = builtin "fmul_FPIEEE32"(%9 : $Builtin.FPIEEE32, %0 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32 // user: %13
// CHECK:   %13 = builtin "fadd_FPIEEE32"(%11 : $Builtin.FPIEEE32, %12 : $Builtin.FPIEEE32) : $Builtin.FPIEEE32
// CHECK:   %14 = alloc_stack $Builtin.FPIEEE32             // users: %20, %19, %15
// CHECK:   %15 = begin_access [init] [static] [no_nested_conflict] %14 : $*Builtin.FPIEEE32 // users: %18, %17
// CHECK:   %16 = float_literal $Builtin.FPIEEE32, 0x0 // 0 // user: %17
// CHECK:   store %16 to [trivial] %15 : $*Builtin.FPIEEE32 // id: %17
// CHECK:   end_access %15 : $*Builtin.FPIEEE32             // id: %18
// CHECK:   %19 = load [trivial] %14 : $*Builtin.FPIEEE32   // user: %21
// CHECK:   dealloc_stack %14 : $*Builtin.FPIEEE32          // id: %20
// CHECK:   return %19 : $Builtin.FPIEEE32                  // id: %21
// CHECK: } // end sil function 'fan_out__adjoint_src_0_wrt_0'
