// RUN: %target-swift-frontend -emit-sil %s | %FileCheck -check-prefix=CHECK-VJP %s
// RUN: %target-swift-frontend -emit-sil -Xllvm -differentiation-use-vjp=false %s | %FileCheck -check-prefix=CHECK-NOVJP %s

import Builtin
import Swift

sil_stage raw

sil @foo_prim : $@convention(thin) (Float) -> (Float, Float) {
bb0(%0 : @trivial $Float):
  %1 = tuple (%0 : $Float, %0 : $Float)
  return %1 : $(Float, Float)
}

sil @foo_adj : $@convention(thin) (Float, Float, Float, Float) -> Float {
bb0(%0 : @trivial $Float, %1 : @trivial $Float, %2 : @trivial $Float, %3 : @trivial $Float):
  return %0 : $Float
}

sil [differentiable source 0 wrt 0 primal @foo_prim adjoint @foo_adj] @foo : $@convention(thin) (Float) -> Float {
bb0(%0 : @trivial $Float):
  return %0 : $Float
}

// Nested function being called by `@func_to_diff`.
sil @nested_func_without_diffattr : $@convention(thin) (Float) -> Float {
bb0(%0 : @trivial $Float):
  %1 = function_ref @foo : $@convention(thin) (Float) -> Float
  %2 = apply %1(%0) : $@convention(thin) (Float) -> Float
  return %2 : $Float
}

// Main function to differentiate.
sil [differentiable source 0 wrt 0] @func_to_diff : $@convention(thin) (Float) -> Float {
bb0(%0 : @trivial $Float):
  %1 = function_ref @nested_func_without_diffattr : $@convention(thin) (Float) -> Float
  %2 = apply %1(%0) : $@convention(thin) (Float) -> Float

  // Note: This apply is not included in the result, so it doesn't get differentiated.
  %3 = function_ref @nested_func_without_diffattr : $@convention(thin) (Float) -> Float
  %4 = apply %3(%2) : $@convention(thin) (Float) -> Float

  %5 = tuple (%2 : $Float, %2 : $Float)
  %6 = tuple_extract %5 : $(Float, Float), 0
  return %6 : $Float
}

// CHECK-VJP-LABEL: struct AD__func_to_diff__Type__src_0_wrt_0 {
// CHECK-VJP-NEXT:   @sil_stored var v_0: Float
// CHECK-VJP-NEXT:   @sil_stored var pullback_0: (Float) -> Float
// CHECK-VJP-NEXT: }

// CHECK-VJP-LABEL: struct AD__nested_func_without_diffattr__Type__src_0_wrt_0 {
// CHECK-VJP-NEXT:   @sil_stored var v_0: Float
// CHECK-VJP-NEXT:   @sil_stored var pullback_0: (Float) -> Float
// CHECK-VJP-NEXT: }

// CHECK-VJP-LABEL: @foo_prim : $@convention(thin) (Float) -> (Float, Float) {
// CHECK-VJP: bb0(%0 : $Float):
// CHECK-VJP:   %1 = tuple (%0 : $Float, %0 : $Float)
// CHECK-VJP:   return %1 : $(Float, Float)
// CHECK-VJP: }

// CHECK-VJP-LABEL: @foo_adj : $@convention(thin) (Float, Float, Float, Float) -> Float {
// CHECK-VJP: bb0(%0 : $Float, %1 : $Float, %2 : $Float, %3 : $Float):
// CHECK-VJP:   return %0 : $Float
// CHECK-VJP: }

// CHECK-VJP-LABEL: [differentiable source 0 wrt 0 primal @foo_prim adjoint @foo_adj vjp @AD__foo__vjp_src_0_wrt_0] @foo : $@convention(thin) (Float) -> Float

// CHECK-VJP-LABEL: [differentiable source 0 wrt 0 primal @AD__nested_func_without_diffattr__primal_src_0_wrt_0 adjoint @AD__nested_func_without_diffattr__adjoint_src_0_wrt_0 vjp @AD__nested_func_without_diffattr__vjp_src_0_wrt_0] @nested_func_without_diffattr : $@convention(thin) (Float) -> Float

// CHECK-VJP-LABEL: [differentiable source 0 wrt 0 primal @AD__func_to_diff__primal_src_0_wrt_0 adjoint @AD__func_to_diff__adjoint_src_0_wrt_0 vjp @AD__func_to_diff__vjp_src_0_wrt_0] @func_to_diff : $@convention(thin) (Float) -> Float

// CHECK-VJP-LABEL: @AD__func_to_diff__primal_src_0_wrt_0 : $@convention(thin) (Float) -> (@owned AD__func_to_diff__Type__src_0_wrt_0, Float) {
// CHECK-VJP: bb0(%0 : $Float):
// CHECK-VJP:   %1 = function_ref @AD__nested_func_without_diffattr__vjp_src_0_wrt_0 : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)
// CHECK-VJP:   %2 = apply %1(%0) : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)
// CHECK-VJP:   %3 = tuple_extract %2 : $(Float, @callee_guaranteed (Float) -> Float), 0
// CHECK-VJP:   %4 = tuple_extract %2 : $(Float, @callee_guaranteed (Float) -> Float), 1
// CHECK-VJP:   %5 = function_ref @nested_func_without_diffattr : $@convention(thin) (Float) -> Float
// CHECK-VJP:   %6 = apply %5(%3) : $@convention(thin) (Float) -> Float
// CHECK-VJP:   %7 = tuple (%3 : $Float, %3 : $Float)
// CHECK-VJP:   %8 = tuple_extract %7 : $(Float, Float), 0
// CHECK-VJP:   %9 = struct $AD__func_to_diff__Type__src_0_wrt_0 (%3 : $Float, %4 : $@callee_guaranteed (Float) -> Float)
// CHECK-VJP:   %10 = tuple (%9 : $AD__func_to_diff__Type__src_0_wrt_0, %8 : $Float)
// CHECK-VJP:   return %10 : $(AD__func_to_diff__Type__src_0_wrt_0, Float)
// CHECK-VJP: }

// CHECK-VJP-LABEL: @AD__func_to_diff__adjoint_src_0_wrt_0 : $@convention(thin) (Float, AD__func_to_diff__Type__src_0_wrt_0, Float, Float) -> Float {
// CHECK-VJP: bb0(%0 : $Float, %1 : $AD__func_to_diff__Type__src_0_wrt_0, %2 : $Float, %3 : $Float):
// CHECK-VJP:   %4 = struct_extract %1 : $AD__func_to_diff__Type__src_0_wrt_0, #AD__func_to_diff__Type__src_0_wrt_0.pullback_0
// CHECK-VJP:   %5 = apply %4(%0) : $@callee_guaranteed (Float) -> Float
// CHECK-VJP:   return %5 : $Float
// CHECK-VJP: }

// CHECK-VJP-LABEL: @AD__nested_func_without_diffattr__primal_src_0_wrt_0 : $@convention(thin) (Float) -> (@owned AD__nested_func_without_diffattr__Type__src_0_wrt_0, Float) {
// CHECK-VJP: bb0(%0 : $Float):
// CHECK-VJP:   %1 = function_ref @AD__foo__vjp_src_0_wrt_0 : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)
// CHECK-VJP:   %2 = apply %1(%0) : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)
// CHECK-VJP:   %3 = tuple_extract %2 : $(Float, @callee_guaranteed (Float) -> Float), 0
// CHECK-VJP:   %4 = tuple_extract %2 : $(Float, @callee_guaranteed (Float) -> Float), 1
// CHECK-VJP:   %5 = struct $AD__nested_func_without_diffattr__Type__src_0_wrt_0 (%3 : $Float, %4 : $@callee_guaranteed (Float) -> Float)
// CHECK-VJP:   %6 = tuple (%5 : $AD__nested_func_without_diffattr__Type__src_0_wrt_0, %3 : $Float)
// CHECK-VJP:   return %6 : $(AD__nested_func_without_diffattr__Type__src_0_wrt_0, Float)
// CHECK-VJP: }

// CHECK-VJP-LABEL: @AD__nested_func_without_diffattr__adjoint_src_0_wrt_0 : $@convention(thin) (Float, AD__nested_func_without_diffattr__Type__src_0_wrt_0, Float, Float) -> Float {
// CHECK-VJP: bb0(%0 : $Float, %1 : $AD__nested_func_without_diffattr__Type__src_0_wrt_0, %2 : $Float, %3 : $Float):
// CHECK-VJP:   %4 = struct_extract %1 : $AD__nested_func_without_diffattr__Type__src_0_wrt_0, #AD__nested_func_without_diffattr__Type__src_0_wrt_0.pullback_0
// CHECK-VJP:   %5 = apply %4(%0) : $@callee_guaranteed (Float) -> Float
// CHECK-VJP:   return %5 : $Float
// CHECK-VJP: }

// CHECK-NOVJP: @usableFromInline
// CHECK-NOVJP: struct AD__func_to_diff__Type__src_0_wrt_0 {
// CHECK-NOVJP:   @sil_stored var pv_0: AD__nested_func_without_diffattr__Type__src_0_wrt_0
// CHECK-NOVJP:   @sil_stored var v_0: Float
// CHECK-NOVJP: }

// CHECK-NOVJP: @usableFromInline
// CHECK-NOVJP: struct AD__nested_func_without_diffattr__Type__src_0_wrt_0 {
// CHECK-NOVJP:   @sil_stored var pv_0: Float
// CHECK-NOVJP:   @sil_stored var v_0: Float
// CHECK-NOVJP: }

// CHECK-NOVJP-LABEL: @foo_prim : $@convention(thin) (Float) -> (Float, Float) {
// CHECK-NOVJP: bb0(%0 : $Float):
// CHECK-NOVJP:   %1 = tuple (%0 : $Float, %0 : $Float)
// CHECK-NOVJP:   return %1 : $(Float, Float)
// CHECK-NOVJP: }

// CHECK-NOVJP-LABEL: @foo_adj : $@convention(thin) (Float, Float, Float, Float) -> Float {
// CHECK-NOVJP: bb0(%0 : $Float, %1 : $Float, %2 : $Float, %3 : $Float):
// CHECK-NOVJP:   return %0 : $Float
// CHECK-NOVJP: }

// CHECK-NOVJP-LABEL: [differentiable source 0 wrt 0 primal @foo_prim adjoint @foo_adj vjp @AD__foo__vjp_src_0_wrt_0] @foo : $@convention(thin) (Float) -> Float

// CHECK-NOVJP-LABEL: [differentiable source 0 wrt 0 primal @AD__nested_func_without_diffattr__primal_src_0_wrt_0 adjoint @AD__nested_func_without_diffattr__adjoint_src_0_wrt_0 vjp @AD__nested_func_without_diffattr__vjp_src_0_wrt_0] @nested_func_without_diffattr : $@convention(thin) (Float) -> Float

// CHECK-NOVJP-LABEL: [differentiable source 0 wrt 0 primal @AD__func_to_diff__primal_src_0_wrt_0 adjoint @AD__func_to_diff__adjoint_src_0_wrt_0 vjp @AD__func_to_diff__vjp_src_0_wrt_0] @func_to_diff : $@convention(thin) (Float) -> Float

// CHECK-NOVJP-LABEL: @AD__func_to_diff__primal_src_0_wrt_0 : $@convention(thin) (Float) -> (@owned AD__func_to_diff__Type__src_0_wrt_0, Float) {
// CHECK-NOVJP: bb0(%0 : $Float):
// CHECK-NOVJP:   %1 = function_ref @AD__nested_func_without_diffattr__primal_src_0_wrt_0 : $@convention(thin) (Float) -> (@owned AD__nested_func_without_diffattr__Type__src_0_wrt_0, Float)
// CHECK-NOVJP:   %2 = apply %1(%0) : $@convention(thin) (Float) -> (@owned AD__nested_func_without_diffattr__Type__src_0_wrt_0, Float)
// CHECK-NOVJP:   %3 = tuple_extract %2 : $(AD__nested_func_without_diffattr__Type__src_0_wrt_0, Float), 0
// CHECK-NOVJP:   %4 = tuple_extract %2 : $(AD__nested_func_without_diffattr__Type__src_0_wrt_0, Float), 1
// CHECK-NOVJP:   // function_ref nested_func_without_diffattr
// CHECK-NOVJP:   %5 = function_ref @nested_func_without_diffattr : $@convention(thin) (Float) -> Float
// CHECK-NOVJP:   %6 = apply %5(%4) : $@convention(thin) (Float) -> Float
// CHECK-NOVJP:   %7 = tuple (%4 : $Float, %4 : $Float)
// CHECK-NOVJP:   %8 = tuple_extract %7 : $(Float, Float), 0
// CHECK-NOVJP:   %9 = struct $AD__func_to_diff__Type__src_0_wrt_0 (%3 : $AD__nested_func_without_diffattr__Type__src_0_wrt_0, %4 : $Float)
// CHECK-NOVJP:   %10 = tuple (%9 : $AD__func_to_diff__Type__src_0_wrt_0, %8 : $Float)
// CHECK-NOVJP:   return %10 : $(AD__func_to_diff__Type__src_0_wrt_0, Float)
// CHECK-NOVJP: }

// CHECK-NOVJP-LABEL: @AD__func_to_diff__adjoint_src_0_wrt_0 : $@convention(thin) (Float, AD__func_to_diff__Type__src_0_wrt_0, Float, Float) -> Float {
// CHECK-NOVJP: bb0(%0 : $Float, %1 : $AD__func_to_diff__Type__src_0_wrt_0, %2 : $Float, %3 : $Float):
// CHECK-NOVJP:   %4 = struct_extract %1 : $AD__func_to_diff__Type__src_0_wrt_0, #AD__func_to_diff__Type__src_0_wrt_0.pv_0
// CHECK-NOVJP:   %5 = struct_extract %1 : $AD__func_to_diff__Type__src_0_wrt_0, #AD__func_to_diff__Type__src_0_wrt_0.v_0
// CHECK-NOVJP:   %6 = function_ref @AD__nested_func_without_diffattr__adjoint_src_0_wrt_0 : $@convention(thin) (Float, AD__nested_func_without_diffattr__Type__src_0_wrt_0, Float, Float) -> Float
// CHECK-NOVJP:   %7 = apply %6(%0, %4, %5, %3) : $@convention(thin) (Float, AD__nested_func_without_diffattr__Type__src_0_wrt_0, Float, Float) -> Float
// CHECK-NOVJP:   return %7 : $Float
// CHECK-NOVJP: }

// CHECK-NOVJP-LABEL: @AD__nested_func_without_diffattr__primal_src_0_wrt_0 : $@convention(thin) (Float) -> (@owned AD__nested_func_without_diffattr__Type__src_0_wrt_0, Float) {
// CHECK-NOVJP: bb0(%0 : $Float):
// CHECK-NOVJP:   %1 = function_ref @foo_prim : $@convention(thin) (Float) -> (Float, Float)
// CHECK-NOVJP:   %2 = apply %1(%0) : $@convention(thin) (Float) -> (Float, Float)
// CHECK-NOVJP:   %3 = tuple_extract %2 : $(Float, Float), 0
// CHECK-NOVJP:   %4 = tuple_extract %2 : $(Float, Float), 1
// CHECK-NOVJP:   %5 = struct $AD__nested_func_without_diffattr__Type__src_0_wrt_0 (%3 : $Float, %4 : $Float)
// CHECK-NOVJP:   %6 = tuple (%5 : $AD__nested_func_without_diffattr__Type__src_0_wrt_0, %4 : $Float)
// CHECK-NOVJP:   return %6 : $(AD__nested_func_without_diffattr__Type__src_0_wrt_0, Float)
// CHECK-NOVJP: }

// CHECK-NOVJP-LABEL: @AD__nested_func_without_diffattr__adjoint_src_0_wrt_0 : $@convention(thin) (Float, AD__nested_func_without_diffattr__Type__src_0_wrt_0, Float, Float) -> Float {
// CHECK-NOVJP: bb0(%0 : $Float, %1 : $AD__nested_func_without_diffattr__Type__src_0_wrt_0, %2 : $Float, %3 : $Float):
// CHECK-NOVJP:   %4 = struct_extract %1 : $AD__nested_func_without_diffattr__Type__src_0_wrt_0, #AD__nested_func_without_diffattr__Type__src_0_wrt_0.pv_0
// CHECK-NOVJP:   %5 = struct_extract %1 : $AD__nested_func_without_diffattr__Type__src_0_wrt_0, #AD__nested_func_without_diffattr__Type__src_0_wrt_0.v_0
// CHECK-NOVJP:   %6 = function_ref @foo_adj : $@convention(thin) (Float, Float, Float, Float) -> Float
// CHECK-NOVJP:   %7 = apply %6(%0, %4, %5, %3) : $@convention(thin) (Float, Float, Float, Float) -> Float
// CHECK-NOVJP:   return %7 : $Float
// CHECK-NOVJP: }
