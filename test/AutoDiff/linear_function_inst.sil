// RUN: %target-sil-opt %s | %FileCheck %s

// RUN: %empty-directory(%t)
// RUN: %target-sil-opt %s -emit-sib -o %t/tmp.sib -module-name linear_function
// RUN: %target-sil-opt %t/tmp.sib -o %t/tmp.2.sib -module-name linear_function
// RUN: %target-sil-opt %t/tmp.2.sib -module-name linear_function | %FileCheck %s

sil_stage raw

import Swift
import Builtin

sil hidden @foo : $@convention(thin) (Float, Float, Float) -> Float {
bb0(%0 : $Float, %1 : $Float, %2 : $Float):
  return %2 : $Float
}

sil hidden @foo_t_wrt_0 : $@convention(thin) (Float, Float, Float) -> Float {
bb0(%0 : $Float, %1 : $Float, %2 : $Float):
  return %2 : $Float
}

sil hidden @foo_t_wrt_1_2 : $@convention(thin) (Float, Float) -> (Float, Float) {
bb0(%0 : $Float, %1 : $Float):
  %2 = tuple (%1 : $Float, %1 : $Float)
  return %2 : $(Float, Float)
}

sil @make_diff_func : $@convention(thin) () -> @differentiable(linear) @convention(thin) (Float) -> Float {
bb0:
  %orig = function_ref @foo : $@convention(thin) (Float) -> Float
  %linear_orig = linear_function [wrt 0] %orig : $@convention(thin) (Float) -> Float
  %trans = function_ref @foo_t : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)
  %linear_orig_with_trans = linear_function [wrt 0] %orig : $@convention(thin) (Float) -> Float with_transpose %trans : $@convention(thin) (Float) -> Float
  return %linear_orig_with_trans : $@differentiable(linear) @convention(thin) (Float) -> Float
}

