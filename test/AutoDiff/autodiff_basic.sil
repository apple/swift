// RUN: %target-sil-opt -differentiation %s | %FileCheck %s

import Builtin
import Swift

sil_stage raw

sil hidden @foo_adj : $@convention(thin) (Float, Float, Float) -> Float {
bb0(%0 : @trivial $Float, %1 : @trivial $Float, %2 : @trivial $Float):
  return %2 : $Float
}

sil hidden [differentiable source 0 wrt 0 primal @foo adjoint @foo_adj primitive] @foo : $@convention(thin) (Float) -> Float {
bb0(%0 : @trivial $Float):
  return %0 : $Float
}

sil hidden @bar : $@convention(thin) (Float) -> (Float, Float) {
bb0(%0 : @trivial $Float):
  %fref = function_ref @foo : $@convention(thin) (Float) -> Float

  %grad = gradient [source 0] [wrt 0] %fref : $@convention(thin) (Float) -> Float
  %grad_result = apply %grad(%0) : $@convention(thin) (Float) -> Float

  %value_preserving_grad = gradient [source 0] [wrt 0] [preserving_result] %fref : $@convention(thin) (Float) -> Float
  %value_and_grad = apply %value_preserving_grad(%0) : $@convention(thin) (Float) -> (Float, Float)

  %adfunc = autodiff_function [wrt 0] [order 1] %fref : $@convention(thin) (Float) -> Float

  return %value_and_grad : $(Float, Float)
}

// Here all `gradient` instructions have been replaced by `function_ref`s.

// CHECK-LABEL: sil hidden @bar :
// CHECK:   [[FREF:%.*]] = function_ref @foo : $@convention(thin) (Float) -> Float
// CHECK:   [[GRAD_REF:%.*]] = function_ref @AD__foo__grad_src_0_wrt_0 : $@convention(thin) (Float) -> Float
// CHECK:   [[GRAD_RESULT:%.*]] = apply [[GRAD_REF]](%0) : $@convention(thin) (Float) -> Float
// CHECK:   [[VALUE_PRESERVING_GRAD_REF:%.*]] = function_ref @AD__foo__grad_src_0_wrt_0_p : $@convention(thin) (Float) -> (Float, Float)
// CHECK:   [[VALUE_PRESERVING_GRAD_RESULT:%.*]] = apply [[VALUE_PRESERVING_GRAD_REF]](%0) : $@convention(thin) (Float) -> (Float, Float)
// CHECK:   [[VJP_REF:%.*]] = function_ref @AD__foo__vjp_src_0_wrt_0 : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)
// CHECK:   autodiff_function [wrt 0] [order 1] [[FREF]] : $@convention(thin) (Float) -> Float with {undef : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float), [[VJP_REF]] : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)}
// CHECK:   return [[VALUE_PRESERVING_GRAD_RESULT]] : $(Float, Float)
// CHECK: }

// CHECK-LABEL:sil hidden @AD__foo__grad_src_0_wrt_0_s_p :
// CHECK: bb0
// CHECK:   %2 = function_ref @foo : $@convention(thin) (Float) -> Float
// CHECK:   %3 = apply %2(%0) : $@convention(thin) (Float) -> Float
// CHECK:   %4 = function_ref @foo_adj : $@convention(thin) (Float, Float, Float) -> Float
// CHECK:   %5 = apply %4(%1, %3, %0) : $@convention(thin) (Float, Float, Float) -> Float
// CHECK:   %6 = tuple (%3 : $Float, %5 : $Float)
// CHECK:   return %6 : $(Float, Float)
// CHECK: }

// CHECK-LABEL: sil hidden @AD__foo__grad_src_0_wrt_0 : $@convention(thin) (Float) -> Float {
// CHECK: bb0(%0 : $Float):
// CHECK:   %1 = alloc_stack $Float
// CHECK:   %2 = integer_literal $Builtin.IntLiteral, 1
// CHECK:   %3 = metatype $@thick Int64.Type
// CHECK:   %4 = witness_method $Int64, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
// CHECK:   %5 = alloc_stack $Int64
// CHECK:   %6 = apply %4<Int64>(%5, %2, %3) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
// CHECK:   %7 = metatype $@thick Float.Type
// CHECK:   %8 = witness_method $Float, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
// CHECK:   %9 = apply %8<Float>(%1, %5, %7) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
// CHECK:   dealloc_stack %5 : $*Int64
// CHECK:   %11 = begin_access [read] [static] %1 : $*Float
// CHECK:   %12 = load %11 : $*Float
// CHECK:   end_access %11 : $*Float
// CHECK:   dealloc_stack %1 : $*Float
// CHECK:   %15 = function_ref @AD__foo__grad_src_0_wrt_0_s_p : $@convention(thin) (Float, Float) -> (Float, Float)
// CHECK:   %16 = apply %15(%0, %12) : $@convention(thin) (Float, Float) -> (Float, Float)
// CHECK:   %17 = tuple_extract %16 : $(Float, Float), 1
// CHECK:   return %17 : $Float
// CHECK: }

// CHECK-LABEL: sil hidden @AD__foo__grad_src_0_wrt_0_p : $@convention(thin) (Float) -> (Float, Float) {
// CHECK: bb0(%0 : $Float):
// CHECK:   %1 = alloc_stack $Float
// CHECK:   %2 = integer_literal $Builtin.IntLiteral, 1
// CHECK:   %3 = metatype $@thick Int64.Type
// CHECK:   %4 = witness_method $Int64, #_ExpressibleByBuiltinIntegerLiteral.init!allocator.1 : <Self where Self : _ExpressibleByBuiltinIntegerLiteral> (Self.Type) -> (Builtin.IntLiteral) -> Self : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
// CHECK:   %5 = alloc_stack $Int64
// CHECK:   %6 = apply %4<Int64>(%5, %2, %3) : $@convention(witness_method: _ExpressibleByBuiltinIntegerLiteral) <τ_0_0 where τ_0_0 : _ExpressibleByBuiltinIntegerLiteral> (Builtin.IntLiteral, @thick τ_0_0.Type) -> @out τ_0_0
// CHECK:   %7 = metatype $@thick Float.Type
// CHECK:   %8 = witness_method $Float, #ExpressibleByIntegerLiteral.init!allocator.1 : <Self where Self : ExpressibleByIntegerLiteral> (Self.Type) -> (Self.IntegerLiteralType) -> Self : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
// CHECK:   %9 = apply %8<Float>(%1, %5, %7) : $@convention(witness_method: ExpressibleByIntegerLiteral) <τ_0_0 where τ_0_0 : ExpressibleByIntegerLiteral> (@in τ_0_0.IntegerLiteralType, @thick τ_0_0.Type) -> @out τ_0_0
// CHECK:   dealloc_stack %5 : $*Int64
// CHECK:   %11 = begin_access [read] [static] %1 : $*Float
// CHECK:   %12 = load %11 : $*Float
// CHECK:   end_access %11 : $*Float
// CHECK:   dealloc_stack %1 : $*Float
// CHECK:   %15 = function_ref @AD__foo__grad_src_0_wrt_0_s_p : $@convention(thin) (Float, Float) -> (Float, Float)
// CHECK:   %16 = apply %15(%0, %12) : $@convention(thin) (Float, Float) -> (Float, Float)
// CHECK:   return %16 : $(Float, Float)
// CHECK: }
