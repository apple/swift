// RUN: %target-sil-opt -emit-sorted-sil -verify-continue-on-failure -o /dev/null %s 2>&1 | %FileCheck %s
// REQUIRES: asserts

sil_stage canonical

import Builtin

class C {}

// CHECK-LABEL: Begin Error in function end_borrow_1_addr_alloc_stack
// CHECK:       SIL verification failed: end_borrow of an address not produced by store_borrow
// CHECK-LABEL: End Error in function end_borrow_1_addr_alloc_stack
sil [ossa] @end_borrow_1_addr_alloc_stack : $@convention(thin) () -> () {
  %addr = alloc_stack $C
  end_borrow %addr : $*C
  dealloc_stack %addr : $*C
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: Begin Error in function alloc_pack_metadata_before_tuple
// CHECK:       SIL verification failed: Introduces instruction of kind which cannot emit on-stack pack metadata:
// CHECK-LABEL: End Error in function alloc_pack_metadata_before_tuple
sil @alloc_pack_metadata_before_tuple : $@convention(thin) () -> () {
  %marker = alloc_pack_metadata $()
  %retval = tuple ()
  dealloc_pack_metadata %marker : $*()
  return %retval : $()
}

// CHECK-LABEL: Begin Error in function dealloc_pack_metadata_with_bad_operand
// CHECK:       SIL verification failed: stack dealloc does not match most recent stack alloc:
// CHECK-LABEL: End Error in function dealloc_pack_metadata_with_bad_operand
// CHECK-LABEL: Begin Error in function dealloc_pack_metadata_with_bad_operand
// CHECK:       SIL verification failed: Must have alloc_pack_metadata operand
// CHECK-LABEL: End Error in function dealloc_pack_metadata_with_bad_operand
sil @dealloc_pack_metadata_with_bad_operand : $@convention(thin) <each T> () -> () {
  %marker = alloc_pack_metadata $()
  // To make the %marker legal.
  %out = apply undef<Pack{repeat each T}>() : $@convention(thin) <each T>() -> ()
  dealloc_pack_metadata %out : $()
  %retval = tuple ()
  return %retval : $()
}

sil @c : $@yield_once @convention(thin) () -> @yields @inout ()

// CHECK:       Recent begin_apply: (%3, **%4**) = begin_apply %0()
// CHECK:       Matching begin_apply: (%1, **%2**) = begin_apply %0()
// CHECK-LABEL: Begin Error in function unnested_coroutines
// CHECK:       SIL verification failed: end_apply does not match most recent begin_apply
// CHECK-LABEL: End Error in function unnested_coroutines
// CHECK:       Recent begin_apply: (%1, **%2**) = begin_apply %0()
// CHECK:       Matching begin_apply: (%3, **%4**) = begin_apply %0()
// CHECK-LABEL: Begin Error in function unnested_coroutines
// CHECK:       SIL verification failed: end_apply does not match most recent begin_apply
// CHECK-LABEL: End Error in function unnested_coroutines
sil [ossa] @unnested_coroutines : $@convention(thin) () -> () {
  %coro = function_ref @c : $@yield_once @convention(thin) () -> @yields @inout ()
  (%t1, %r1) = begin_apply %coro() : $@yield_once @convention(thin) () -> @yields @inout ()
  (%t2, %r2) = begin_apply %coro() : $@yield_once @convention(thin) () -> @yields @inout ()
  end_apply %r1
  end_apply %r2
  %retval = tuple ()
  return %retval : $()
}
