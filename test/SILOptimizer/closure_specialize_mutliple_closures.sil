// RUN: %target-sil-opt -enable-sil-verify-all -closure-specialize -module-name=test %s | %FileCheck %s

import Builtin
import Swift

class A {}

//===----------------------------------------------------------------------===//
//                        Closures and Closure Users
//===----------------------------------------------------------------------===//

sil hidden [noinline] @closure : $@convention(thin) (@owned A, @owned A) -> () {
bb0(%0 : $A, %1 : $A):
  strong_release %1 : $A
  strong_release %0 : $A
  %4 = tuple ()
  return %4 : $()
}

sil hidden [noinline] @use_closures : $@convention(thin) (@owned @callee_owned (@owned A) -> (), @owned @callee_owned (@owned A) -> ()) -> () {
bb0(%c1 : $@callee_owned (@owned A) -> (), %c2 : $@callee_owned (@owned A) -> ()):
  %1 = alloc_ref $A
  strong_retain %1 : $A
  apply %c1(%1) : $@callee_owned (@owned A) -> ()
  apply %c2(%1) : $@callee_owned (@owned A) -> ()
  %3 = tuple ()
  return %3 : $()
}

sil hidden [noinline] @use_closures_throw : $@convention(thin) (@owned @callee_owned (@owned A) -> (), @owned @callee_owned (@owned A) -> ()) -> @error Error {
bb0(%c1 : $@callee_owned (@owned A) -> (), %c2 : $@callee_owned (@owned A) -> ()):
  %1 = alloc_ref $A
  strong_retain %1 : $A
  apply %c1(%1) : $@callee_owned (@owned A) -> ()
  apply %c2(%1) : $@callee_owned (@owned A) -> ()
  %3 = tuple ()
  return %3 : $()
}

// Check that the specialized users call both closures.

// CHECK-LABEL: sil shared [noinline] @$s12use_closures7closure4test1ACAbETf1cc_n : $@convention(thin) (@owned A, @owned A) -> ()
// CHECK: bb0([[ARG1:%.*]] : $A, [[ARG2:%.*]] : $A):
// CHECK: [[FN:%[0-9]+]] = function_ref @closure : $@convention(thin) (@owned A, @owned A) -> ()
// CHECK: [[C1:%[0-9]+]] = partial_apply [[FN]]([[ARG1]]) : $@convention(thin) (@owned A, @owned A) -> ()
// CHECK: [[FN:%[0-9]+]] = function_ref @closure : $@convention(thin) (@owned A, @owned A) -> ()
// CHECK: [[C2:%[0-9]+]] = partial_apply [[FN]]([[ARG2]]) : $@convention(thin) (@owned A, @owned A) -> ()
// CHECK: [[ALLOC:%[0-9]+]] = alloc_ref $A
// CHECK: strong_retain [[ALLOC]] : $A
// CHECK: apply [[C1]]([[ALLOC]]) : $@callee_owned (@owned A) -> ()
// CHECK: apply [[C2]]([[ALLOC]]) : $@callee_owned (@owned A) -> ()
// CHECK-LABEL: end sil function '$s12use_closures7closure4test1ACAbETf1cc_n'

// CHECK-LABEL: @$s18use_closures_throw7closure4test1ACAbETf1cc_n : $@convention(thin) (@owned A, @owned A) -> @error Error
// CHECK: bb0([[ARG1:%.*]] : $A, [[ARG2:%.*]] : $A):
// CHECK: [[FN:%[0-9]+]] = function_ref @closure : $@convention(thin) (@owned A, @owned A) -> ()
// CHECK: [[C1:%[0-9]+]] = partial_apply [[FN]]([[ARG1]]) : $@convention(thin) (@owned A, @owned A) -> ()
// CHECK: [[FN:%[0-9]+]] = function_ref @closure : $@convention(thin) (@owned A, @owned A) -> ()
// CHECK: [[C2:%[0-9]+]] = partial_apply [[FN]]([[ARG2]]) : $@convention(thin) (@owned A, @owned A) -> ()
// CHECK: [[ALLOC:%[0-9]+]] = alloc_ref $A
// CHECK: strong_retain [[ALLOC]] : $A
// CHECK: apply [[C1]]([[ALLOC]]) : $@callee_owned (@owned A) -> ()
// CHECK: apply [[C2]]([[ALLOC]]) : $@callee_owned (@owned A) -> ()
// CHECK-LABEL: end sil function '$s18use_closures_throw7closure4test1ACAbETf1cc_n'

//===----------------------------------------------------------------------===//
//                                 Callers
//===----------------------------------------------------------------------===//

// CHECK-LABEL: sil {{.*}} @different_execution_counts
// CHECK: bb0([[ARG:%.*]] : $A)
// CHECK: strong_retain [[ARG]]
// CHECK-NOT: partial_apply
// CHECK: br bb2

// CHECK: bb1:
// CHECK:  strong_release [[ARG]]
// CHECK:  strong_release [[ARG]]
// CHECK:  return

// CHECK: bb2({{.*}}):
// CHECK: [[SPECIALIZED_CLOSURE_USER:%.*]] = function_ref @$s12use_closures7closure4test1ACAbETf1cc_n
// CHECK: retain_value [[ARG]]
// CHECK: retain_value [[ARG]]
// CHECK: apply [[SPECIALIZED_CLOSURE_USER]]([[ARG]], [[ARG]])
// CHECK-LABEL: end sil function 'different_execution_counts'
sil hidden [noinline] @different_execution_counts : $@convention(thin) (@guaranteed A) -> () {
bb0(%0 : $A):
  strong_retain %0 : $A
  %2 = function_ref @closure : $@convention(thin) (@owned A, @owned A) -> ()
  %c1 = partial_apply %2(%0) : $@convention(thin) (@owned A, @owned A) -> ()
  %c2 = partial_apply %2(%0) : $@convention(thin) (@owned A, @owned A) -> ()
  %4 = integer_literal $Builtin.Int64, 0
  %5 = integer_literal $Builtin.Int64, 5
  %6 = integer_literal $Builtin.Int64, 1
  %7 = integer_literal $Builtin.Int1, 0
  %8 = function_ref @use_closures : $@convention(thin) (@owned @callee_owned (@owned A) -> (), @owned @callee_owned (@owned A) -> ()) -> ()
  br bb2(%4 : $Builtin.Int64)

bb1:
  strong_release %c1 : $@callee_owned (@owned A) -> ()
  strong_release %c2 : $@callee_owned (@owned A) -> ()
  %11 = tuple ()
  return %11 : $()

bb2(%13 : $Builtin.Int64):
  %14 = builtin "sadd_with_overflow_Int64"(%13 : $Builtin.Int64, %6 : $Builtin.Int64, %7 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1)
  %15 = tuple_extract %14 : $(Builtin.Int64, Builtin.Int1), 0
  strong_retain %c1 : $@callee_owned (@owned A) -> ()
  strong_retain %c2 : $@callee_owned (@owned A) -> ()
  %17 = apply %8(%c1, %c2) : $@convention(thin) (@owned @callee_owned (@owned A) -> (), @owned @callee_owned (@owned A) -> ()) -> ()
  %18 = builtin "cmp_eq_Int64"(%15 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1
  cond_br %18, bb1, bb3

bb3:
  br bb2(%15 : $Builtin.Int64)
}

// CHECK-LABEL: sil @insert_release_at_critical_loop_exit_edge
// CHECK: bb0([[ARG:%[0-9]+]] : $A):
// CHECK: strong_retain [[ARG]]
// CHECK: bb2:
// CHECK: [[SPECIALIZED_CLOSURE_USER:%.*]] = function_ref @$s12use_closures7closure4test1ACAbETf1cc_n
// CHECK: retain_value [[ARG]]
// CHECK: retain_value [[ARG]]
// CHECK: apply [[SPECIALIZED_CLOSURE_USER]]([[ARG]], [[ARG]])
// CHECK-LABEL: end sil function 'insert_release_at_critical_loop_exit_edge'
sil @insert_release_at_critical_loop_exit_edge : $@convention(thin) (@guaranteed A) -> () {
bb0(%0 : $A):
  strong_retain %0 : $A
  %2 = function_ref @closure : $@convention(thin) (@owned A, @owned A) -> ()
  %c1 = partial_apply %2(%0) : $@convention(thin) (@owned A, @owned A) -> ()
  %c2 = partial_apply %2(%0) : $@convention(thin) (@owned A, @owned A) -> ()
  %8 = function_ref @use_closures : $@convention(thin) (@owned @callee_owned (@owned A) -> (), @owned @callee_owned (@owned A) -> ()) -> ()
  %5 = partial_apply %8(%c1, %c2) : $@convention(thin) (@owned @callee_owned (@owned A) -> (), @owned @callee_owned (@owned A) -> ()) -> ()
  cond_br undef, bb3, bb1

bb1:
  br bb2

bb2:
  strong_retain %c1 : $@callee_owned (@owned A) -> ()
  strong_retain %c2 : $@callee_owned (@owned A) -> ()
  %17 = apply %8(%c1, %c2) : $@convention(thin) (@owned @callee_owned (@owned A) -> (), @owned @callee_owned (@owned A) -> ()) -> ()
  cond_br undef, bb2, bb4

bb3:
  br bb4

bb4:
  strong_release %5 : $@callee_owned () -> ()
  %11 = tuple ()
  return %11 : $()
}

// CHECK-LABEL: sil @insert_release_after_try_apply
// CHECK: bb0([[ARG:%[0-9]+]] : $A):
// CHECK: bb1:
// CHECK: [[SPECIALIZED_CLOSURE_USER:%.*]] = function_ref @$s18use_closures_throw7closure4test1ACAbETf1cc_n
// CHECK: retain_value [[ARG]]
// CHECK: retain_value [[ARG]]
// CHECK: apply [[SPECIALIZED_CLOSURE_USER]]([[ARG]], [[ARG]])
// CHECK-LABEL: end sil function 'insert_release_after_try_apply'
sil @insert_release_after_try_apply : $@convention(thin) (@guaranteed A) -> () {
bb0(%0 : $A):
  %2 = function_ref @closure : $@convention(thin) (@owned A, @owned A) -> ()
  %c1 = partial_apply %2(%0) : $@convention(thin) (@owned A, @owned A) -> ()
  %c2 = partial_apply %2(%0) : $@convention(thin) (@owned A, @owned A) -> ()
  %8 = function_ref @use_closures_throw : $@convention(thin) (@owned @callee_owned (@owned A) -> (), @owned @callee_owned (@owned A) -> ()) -> @error Error
  br bb1

bb1:
  strong_retain %c1 : $@callee_owned (@owned A) -> ()
  strong_retain %c2 : $@callee_owned (@owned A) -> ()
  try_apply %8(%c1, %c2) : $@convention(thin) (@owned @callee_owned (@owned A) -> (), @owned @callee_owned (@owned A) -> ()) -> @error Error, normal bb2, error bb3

bb2(%n : $()):
  br bb4

bb3(%e : $Error):
  br bb4

bb4:
  %11 = tuple ()
  return %11 : $()
}
