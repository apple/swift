// RUN: %target-typecheck-verify-swift -enable-experimental-feature ParserASTGen -enable-experimental-feature ValidateTypeReprASTGen -disable-availability-checking

// -enable-experimental-feature requires an asserts build
// REQUIRES: asserts
// rdar://116686158
// UNSUPPORTED: asan

protocol P1<A> {
  associatedtype A
}
protocol P2 {}

struct S {
  struct G<T> {}
  struct SS {
    struct SSS {}
  }

  struct `Protocol` {}

  typealias _Self = Self
}

struct G<A> {
  struct S {}
  struct GG<B> {}
}

let _: Any
let _: S
let _: S.SS
let _: S.`Protocol`
let _: S.SS.SSS
let _: G<S>
let _: S.G<S>
let _: G<S>.S
let _: G<G<G<S>>>.GG<S>
let _: (G<G<G<S>>>.GG<S>.Type).Type
let _: (S).SS?
let _: [Int : [S]]
let _: (S, S)
let _: (a: S, b: S)
// FIXME: Not diagnosed in ASTGen.
let _: (a b: S, c d: S)
let _: () -> S
let _: (S, _: S, S) -> S
let _: (S, G<S>?...) -> S
let _: () throws -> S
let _: () async -> S
// FIXME: Recovery AST mismatch
// expected-error@+3 {{unexpected mismatch between AST generated by C++ parser and new Swift implementation}}
// expected-error@+2 {{expected throwing specifier; did you mean 'throws'?}}
// expected-note@+1 {{replace 'rethrows' with 'throws'}}
let _: () rethrows -> S
let _: () async throws -> S
// FIXME: Recovery AST mismatch
// expected-error@+3 {{unexpected mismatch between AST generated by C++ parser and new Swift implementation}}
// expected-error@+2 {{'async' must precede 'throws'}}
// expected-note@+1 {{move 'async' in front of 'throws'}}
let _: () throws async -> S
let _: (a: S) -> S
// FIXME: Not diagnosed in ASTGen.
let _: (a: S) -> S
// FIXME: Not diagnosed in ASTGen.
// FIXME: Recovery AST mismatch
// expected-error@+1 3 {{unexpected mismatch between AST generated by C++ parser and new Swift implementation}}
let _: (a b: S) -> S
// FIXME: Not diagnosed in ASTGen.
// FIXME: Recovery AST mismatch
// expected-error@+1 3 {{unexpected mismatch between AST generated by C++ parser and new Swift implementation}}
let _: (_ a: S, S) -> (S) -> S
let _: (
  inout Bool,
  borrowing String,
  consuming String,
  __shared String,
  __owned String,
  _: _const String,
  isolated MainActor
) -> S
let _: (@escaping @autoclosure () -> S) -> S
let _: any P1
let _: any P1<S>
let _: any P1 & P2
// FIXME: AST mismatch
// expected-error@+1 {{unexpected mismatch between AST generated by C++ parser and new Swift implementation}}
let _: any P1 & Any


extension S: P1 {
  typealias A = S
}
func opaqueTypes(arg: some P1<S> & P2) -> some P1<S> {
  return arg
}

func variadicGenerics<each T>(_: repeat (each T, G<each T>)) {}
