// RUN: %target-swift-frontend -module-name cxx_ir -I %S/Inputs/abi -module-cache-path %t -enable-cxx-interop -emit-ir -o - -primary-file %s | %FileCheck %s
sil_stage canonical

import Builtin
import Swift
import SwiftShims
import cxx_module

// CHECK-LABEL: define hidden swiftcc i32 @virtual_method(%TSo14MethodsVirtualV* nocapture dereferenceable(8), i32) #0 {
// CHECK: [[THIS_PTR1:%.*]] = bitcast %TSo14MethodsVirtualV* %0 to i32 (%class.MethodsVirtual*, i32)***
// CHECK: [[VTABLE:%.*]] = load i32 (%class.MethodsVirtual*, i32)**, i32 (%class.MethodsVirtual*, i32)*** %2, align 8
// CHECK: [[VFN_PTR:%.*]] = getelementptr inbounds i32 (%class.MethodsVirtual*, i32)*, i32 (%class.MethodsVirtual*, i32)** %vtable, i64 0
// CHECK: [[VFN:%.*]] = load i32 (%class.MethodsVirtual*, i32)*, i32 (%class.MethodsVirtual*, i32)** [[VFN_PTR]], align 8
// CHECK: [[THIS_PTR2:%.*]] = bitcast %TSo14MethodsVirtualV* %0 to %class.MethodsVirtual*
// CHECK: [[RESULT:%.*]] = call i32 %3(%class.MethodsVirtual* [[THIS_PTR2]], i32 %1)
// CHECK: ret i32 [[RESULT]]
sil hidden @virtual_method : $@convention(thin) (@inout MethodsVirtual, Int32) -> Int32 {
bb0(%0 : $*MethodsVirtual, %1 : $Int32):
  %2 = begin_access [modify] [static] %0 : $*MethodsVirtual
  (%3, %4) = cxx_virtual_method %2 : $*MethodsVirtual, #MethodsVirtual.SimpleVirtualMethod!1.foreign : (inout MethodsVirtual) -> (Int32) -> Int32, $@convention(c) (@inout MethodsVirtual, Int32) -> Int32
  %5 = apply %3(%4, %1) : $@convention(c) (@inout MethodsVirtual, Int32) -> Int32
  end_access %2 : $*MethodsVirtual
  return %5 : $Int32
}
