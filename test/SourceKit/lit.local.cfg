import os
import platform
import shlex

# NOTE: this mirrors the kIsWindows from the parent lit.cfg
kIsWindows = platform.system() == 'Windows'
if kIsWindows:
    # Detect if we are on a substituted drive
    # We can't rely on os.path.realpath because older Python versions implement it as abspath
    # So get the list of substitute drives from subst.exe
    import subprocess
    subst_path = os.path.join(os.environ["SystemRoot"], "system32", "subst.exe")
    subst_stdout = subprocess.run([subst_path], capture_output=True).stdout
    subst_lines_bytes = subst_stdout.splitlines()
    
    # Encoding doesn't matter, the drive is one letter and a colon
    current_drive_bytes = os.path.splitdrive(__file__)[0].encode("utf-8")
    if any(line_bytes.startswith(current_drive_bytes) for line_bytes in subst_lines_bytes):
        config.available_features.add('windows_substituted_drive')

if 'sourcekit' not in config.available_features:
    config.unsupported = True

elif 'OS=linux-gnu' in config.available_features and 'LinuxDistribution=Ubuntu-14.04' in config.available_features:
    config.unsupported = True

elif 'swift_evolve' in config.available_features:
    # A lot of tests necessarily depend on standard library source order.
    config.unsupported = True

else:
    sk_path_sanitize = os.path.join(os.path.dirname(__file__), 'Inputs', 'sourcekitd_path_sanitize.py')

    config.substitutions.append( ('%sourcekitd-test', '%s -module-cache-path %r' % (config.sourcekitd_test, config.clang_module_cache_path)) )
    config.substitutions.append( ('%complete-test', '%s -module-cache-path=%r' % (config.complete_test, config.clang_module_cache_path)) )
    config.substitutions.append( ('%swiftlib_dir', config.swiftlib_dir) )
    config.substitutions.append( ('%sed_clean', '%s %s' % (shlex.quote(sys.executable), sk_path_sanitize) ) )
